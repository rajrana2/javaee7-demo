<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" lang="en">
<bookinfo>
<title>Java EE 7 Hands-on Lab</title>
<date>Jun 25, 2014</date>
<author>
<firstname>Arun</firstname>

<surname>Gupta</surname>
<email>https://twitter.com/arungupta[@arungupta]</email>
</author>

<authorinitials>AG</authorinitials>
<revhistory>
<revision>
<revnumber>2.1</revnumber>
<date>Jun 25, 2014</date>
<authorinitials>AG</authorinitials>

</revision>
</revhistory>



</bookinfo>
<chapter id="_introduction">
<title>Introduction</title>
<simpara>The Java EE 7 platform continues the ease of development push that
characterized prior releases by bringing further simplification to
enterprise development. It adds new and important APIs such as the REST
client API in JAX-RS 2.0 and the long awaited Batch Processing API. Java
Message Service 2.0 has undergone an extreme makeover to align with the
improvements in the Java language. There are plenty of improvements to
several other components. Newer web standards like HTML 5, WebSocket,
and JSON processing are embraced to build modern web applications.</simpara>
<simpara>This hands-on lab will build a typical 3-tier end-to-end application
using the following Java EE 7 technologies:</simpara>
<itemizedlist>
<listitem>
<simpara>Java API for WebSocket 1.0 (JSR 356)</simpara>
</listitem>
<listitem>
<simpara>Batch Applications for the Java Platform 1.0 (JSR 352)</simpara>
</listitem>
<listitem>
<simpara>Java API for JSON Processing 1.0 (JSR 353)</simpara>
</listitem>
<listitem>
<simpara>Java API for RESTful Web Services 2.0 (JSR 339)</simpara>
</listitem>
<listitem>
<simpara>Java Message Service 2.0 (JSR 343)</simpara>
</listitem>
<listitem>
<simpara>Java Persistence API 2.1 (JSR 338)</simpara>
</listitem>
<listitem>
<simpara>JavaServer Faces 2.2 (JSR 344)</simpara>
</listitem>
<listitem>
<simpara>Contexts and Dependency Injection 1.1 (JSR 346)</simpara>
</listitem>
<listitem>
<simpara>Bean Validation 1.1 (JSR 349)</simpara>
</listitem>
<listitem>
<simpara>Java Transaction API 1.2 (JSR 907)</simpara>
</listitem>
</itemizedlist>

<simpara>Together these APIs will allow you to be more productive by simplifying enterprise development.</simpara>
<simpara>The latest version of this document can be downloaded from <ulink url="https://github.com/javaee-samples/javaee7-hol/blob/master/docs/asciidoc/javaee7-hol.html">javaee7-hol.html</ulink>. Please file issues or send pull requests for any updates.</simpara>
<section id="_software_requirement">
<title>Software Requirement</title>
<simpara>The following software needs to be downloaded and installed:</simpara>
<itemizedlist>
<listitem>
<simpara>JDK 7 from
<ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</ulink>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Application Server</emphasis>: This lab can use WildFly 8 or GlassFish 4 as the application server. This document provides instructions for
WildFly 8.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">IDE</emphasis>: NetBeans 8.0+, JBoss Developer Studio (Eclipse-based), or IntelliJ IDEA 13 can be used. This document provides instructions for
NetBeans 8.</simpara>
<simpara>Download &#8220;All&#8221; or &#8220;Java EE&#8221; version from
<ulink url="http://netbeans.org/downloads/">http://netbeans.org/downloads/</ulink>. A
snapshot of the downloads page is shown and highlights the exact
&#8216;Download&#8217; button to be clicked.</simpara>
<figure>
<title>NetBeans download</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/1.1-netbeans-download.png"/>
    </imageobject>
    <textobject><phrase>1.1 netbeans download</phrase></textobject>
  </mediaobject>
</figure>

<simpara>WildFly 8 needs to be downloaded from <ulink url="http://wildfly.org/downloads/">wildfly.org</ulink> and configured in NetBeans IDE following the instructions in <xref linkend="appendix-wildfly-netbeans"/>.</simpara>
<tip>
<simpara><xref linkend="appendix-wildfly-idea"/> explains how to configure WildFly in IntelliJ IDEA.</simpara>
</tip>

</listitem>
</itemizedlist>

</section>
</chapter>
<chapter id="_problem_statement">
<title>Problem Statement</title>
<simpara>This hands-on lab builds a typical 3-tier Java EE 7 Web application that
allows customers to view the show timings for a movie in a 7-theater
Cineplex and make reservations. Users can add new movies and delete
existing movies. Customers can discuss the movie in a chat room. Total
sales from each showing are calculated at the end of the day. Customers
also accrue points for watching movies.</simpara>
<figure>
<title>Architecture diagram</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/2.0-problem-statement.png"/>
    </imageobject>
    <textobject><phrase>2.0 problem statement</phrase></textobject>
  </mediaobject>
</figure>

<simpara>This figure shows the key components of the application. The User
Interface initiates all the flows in the application. Show Booking,
Add/Delete Movie and Ticket Sales interact with the database; Movie
Points may interact with the database, however, this is out of scope for
this application; and Chat Room does not interact with the database.</simpara>
<simpara>The different functions of the application, as detailed above, utilize
various Java technologies and web standards in their implementation. The
following figure shows how Java EE technologies are used in different
flows.</simpara>
<figure>
<title>Technologies used in the application</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/2.0-technologies.png"/>
    </imageobject>
    <textobject><phrase>2.0 technologies</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The table below details the components and the selected technology used
in its’ implementation.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="20*"/>
    
    <colspec colname="col_2" colwidth="80*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Flow</entry>
        
        <entry align="left" valign="top">Description</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>User Interface</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Written entirely in <emphasis>JavaServer Faces</emphasis> (JSF)</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Chat Room</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Utilizes client-side JavaScript and JSON to communicate with a <emphasis>WebSocket</emphasis> endpoint</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Ticket Sales</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Uses <emphasis>Batch Applications for the Java Platform</emphasis> to calculate the total
sales and persist to the database.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Add/Delete Movie</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Implemented using RESTful Web Services. JSON is used as on-the-wire data format</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Movie Points</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Uses <emphasis>Java Message Service</emphasis> (JMS) to update and obtain loyalty reward
points; an optional implementation using database technology may be
performed</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Show Booking</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Uses lightweight <emphasis>Enterprise JavaBeans</emphasis> to communicate with the database
using Java Persistence API</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>This document is not a comprehensive tutorial of Java EE. The attendees
are expected to know the basic Java EE concepts such as EJB, JPA,
JAX-RS, and CDI. The <ulink url="http://docs.oracle.com/javaee/7/tutorial/doc/">Java
EE 7 Tutorial</ulink> is a good place to learn all these concepts. However
enough explanation is provided in this guide to get you started with the
application.</simpara>
<warning>
<simpara>This is a sample application and the code may not be
following the best practices to prevent SQL injection, cross-side
scripting attacks, escaping parameters, and other similar features
expected of a robust enterprise application. This is intentional such as
to stay focused on explaining the technology. It is highly recommended
to make sure that the code copied from this sample application is
updated to meet those requirements.</simpara>
</warning>

<section id="_lab_flow">
<title>Lab Flow</title>
<simpara>The attendees will start with an existing maven application and by
following the instructions and guidance provided by this lab they will:</simpara>
<itemizedlist>
<listitem>
<simpara>Read existing source code to gain an understanding of the structure of
the application and use of the selected platform technologies.</simpara>
</listitem>
<listitem>
<simpara>Add new and update existing code with provided fragments in order to
demonstrate usage of different technology stacks in the Java EE 7
platform.</simpara>
</listitem>
</itemizedlist>

<simpara>While you are copy/pasting the code from this document into NetBeans,
here are couple of tips that will be really useful and make your
experience enjoyable!</simpara>
<variablelist>
<varlistentry>
<term>Source Code Formatting</term>
<listitem>
<simpara>NetBeans provides capability to neatly format the source code
following conventions. This can be done for any type of source code,
whether its XML or Java or something else. It is highly recommended to
use this functionality after the code is copy/pasted from this document
to the editor. This keeps the code legible.</simpara>
<simpara>This functionality can be accessed by right-clicking in the editor pane
and selecting “Format” as shown.</simpara>
<figure>
<title>Format code in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/2.1-format.png"/>
    </imageobject>
    <textobject><phrase>2.1 format</phrase></textobject>
  </mediaobject>
</figure>

<simpara>This functionality is also accessible using the following keyboard
shortcuts:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <?dbhtml table-width="50%"?>
  <?dbfo table-width="50%"?>
  <?dblatex table-width="50%"?>
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="107*"/>
    
    <colspec colname="col_2" colwidth="107*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Shortcut</entry>
        
        <entry align="left" valign="top">Operating System</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>F</keycap></keycombo></simpara></entry>
        
        <entry align="left" valign="top"><simpara>OSX</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><keycombo><keycap>Alt</keycap><keycap>Shift</keycap><keycap>F</keycap></keycombo></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Windows</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><keycombo><keycap>Alt</keycap><keycap>Shift</keycap><keycap>F</keycap></keycombo></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Linux</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

</listitem>
</varlistentry>
<varlistentry>
<term>Automatic Imports</term>
<listitem>
<simpara>Copy/pasting the Java code from this document in NetBeans editor does
not auto-import the classes. This is required to be done manually in
order for the classes to compile. This can be fixed for each missing
import statement by clicking on the yellow bulb shown in the side bar.</simpara>
<figure>
<title>ServerEndpoint import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/2.1-server-endpoint.png"/>
    </imageobject>
    <textobject><phrase>2.1 server endpoint</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Alternatively all the imports can be resolved by right-clicking on the
editor pane and selecting &#8220;Fix Imports&#8221; as shown.</simpara>
<figure>
<title>Fix Imports in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/2.1-fix-imports.png"/>
    </imageobject>
    <textobject><phrase>2.1 fix imports</phrase></textobject>
  </mediaobject>
</figure>

<simpara>This functionality is also accessible using the following keyboard
shortcuts:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <?dbhtml table-width="50%"?>
  <?dbfo table-width="50%"?>
  <?dblatex table-width="50%"?>
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="107*"/>
    
    <colspec colname="col_2" colwidth="107*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Shortcut</entry>
        
        <entry align="left" valign="top">Operating System</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><keycombo><keycap>Command</keycap><keycap>Shift</keycap><keycap>I</keycap></keycombo></simpara></entry>
        
        <entry align="left" valign="top"><simpara>OSX</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>I</keycap></keycombo></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Windows</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>I</keycap></keycombo></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Linux</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>The defaults may work in most of the cases. Choices are shown in case a
class is available to import from multiple packages. If multiple
packages are available then specific packages to import from are clearly
marked in the document.</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
<section id="_estimated_time">
<title>Estimated Time</title>
<simpara>Following the complete instructions in this document can take any where
from two to four hours. The wide time range accommodates for learning
the new technologies, finding your way in NetBeans, copy/pasting the
code, and debugging the errors.</simpara>
<simpara>The recommended flow is where you follow through the instructions in all
sections in the listed sequence. Alternatively, you may like to cover
section <xref linkend="walk-through"/> through <xref linkend="jsf"/> in an order of your choice, based upon your
interest and preference of the technology. However section <xref linkend="jaxrs"/> is a
pre-requisite for <xref linkend="json"/>.</simpara>
<simpara>Here is an approximate time estimate for each section:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="66*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Section Title</entry>
        
        <entry align="left" valign="top">Estimated Time</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="walk-through"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>15 - 30 mins</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="websocket"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>30 - 45 mins</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="batch"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>30 - 45 mins</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="jaxrs"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>30 - 45 mins</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="json"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>30 - 45 mins</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="jms"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>30 - 45 mins</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><xref linkend="jsf"/></simpara></entry>
        
        <entry align="left" valign="top"><simpara>30 - 45 mins</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>The listed time for each section is only an estimate and by no means
restrict you within that. These sections have been completed in much
shorter time, and you can do it too!</simpara>
<tip>
<simpara>The listed time for each section also allows you to create a custom
version of the lab depending upon your target audience and available
time.</simpara>
</tip>

</section>
</chapter>
<chapter id="walk-through">
<title>Walk-through of Sample Application</title>
<simpara><emphasis role="strong">Purpose</emphasis>: This section will download the sample application to be used
in this hands-on lab. A walk-through of the application will be
performed to provide an understanding of the application architecture.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 15-30 mins</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Download the sample application from
<ulink url="https://github.com/javaee-samples/javaee7-hol/blob/master/starting-template/movieplex7-starting-template.zip?raw=true">movieplex7-starting-template.zip</ulink>
and unzip. This will create a &#8216;movieplex7&#8217; directory and unzips all the
content there.</simpara>
</listitem>
<listitem>
<simpara>In NetBeans IDE, select &#8216;File&#8217;, &#8216;Open Project&#8217;, select the
unzipped directory, and click on &#8216;Open Project&#8217;. The project structure
is shown.</simpara>
<figure>
<title>Project structure in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/3.2-project-structure.png"/>
    </imageobject>
    <textobject><phrase>3.2 project structure</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Maven Coordinates: Expand &#8216;Project Files&#8217; and double click on
&#8216;pom.xml&#8217;. In the &#8216;pom.xml&#8217;, the Java EE 7 API is specified as a
&lt;dependency&gt;:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax&lt;/groupId&gt;
        &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;
        &lt;version&gt;7.0&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>

<simpara>This will ensure that Java EE 7 APIs are retrieved from the central
Maven repository.</simpara>
<note>
<simpara>The Java EE 6 platform introduced the notion of &#8216;profiles&#8217;. A profile is
a configuration of the Java EE platform targeted at a specific class of
applications. All Java EE profiles share a set of common features, such
as naming and resource injection, packaging rules, security
requirements, etc. A profile may contain a proper subset or superset of
the technologies contained in the platform.</simpara>
<simpara>The Java EE Web Profile is a profile of the Java EE Platform
specifically targeted at modern web applications. The complete set of
specifications defined in the Web Profile is defined in the Java EE 7
Web Profile Specification.</simpara>
</note>

<simpara>WildFly can be started in Full Platform or Web Profile.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Default Data Source</emphasis>: Expand &#8216;Other Sources&#8217;,
&#8216;src/main/resources&#8217;, &#8216;META-INF&#8217;, and double-click on &#8216;persistence.xml&#8217;.
By default, NetBeans opens the file in Design View. Click on &#8216;Source&#8217; tab
to view the XML source.</simpara>
<figure>
<title>persistence.xml</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/3.2-persistence-xml.png"/>
    </imageobject>
    <textobject><phrase>3.2 persistence xml</phrase></textobject>
  </mediaobject>
</figure>

<simpara>It looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence
    version="2.1"
    xmlns="http://xmlns.jcp.org/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
    http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"&gt;
    &lt;persistence-unit name="movieplex7PU" transaction-type="JTA"&gt;
        &lt;!--
            &lt;jta-data-source&gt;java:comp/DefaultDataSource&lt;/jta-data-source&gt;
        --&gt;
        &lt;properties&gt;
            &lt;property
                name="javax.persistence.schema-generation.database.action"
                value="drop-and-create"/&gt;
            &lt;property
                name="javax.persistence.schema-generation.create-source"
                value="script"/&gt;
            &lt;property
                name="javax.persistence.schema-generation.drop-source"
                value="script"/&gt;
            &lt;property
                name="javax.persistence.schema-generation.drop-script-source"
                value="META-INF/drop.sql"/&gt;
            &lt;property
                name="javax.persistence.sql-load-script-source"
                value="META-INF/load.sql"/&gt;
            &lt;property
                name="eclipselink.deploy-on-startup"
                value="true"/&gt;
            &lt;property
                name="eclipselink.logging.exceptions"
                value="false"/&gt;
        &lt;/properties&gt;
    &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>

<simpara>Notice <literal>&lt;jta-data-source&gt;</literal> is commented out, i.e. no data source element
is specified. This element identifies the JDBC resource to connect to in
the runtime environment of the underlying application server.</simpara>
<simpara>The Java EE 7 platform defines a new default data source that must be
provided by the runtime. This pre-configured data source is accessible
under the JNDI name</simpara>
<programlisting language="java" linenumbering="unnumbered">java:comp/DefaultDataSource</programlisting>

<simpara>The JPA 2.1 specification says if neither <literal>jta-data-source</literal> nor
<literal>non-jta-data-source</literal> elements are specified, the deployer must specify a
JTA data source or the default JTA data source must be provided by the
container.</simpara>
<simpara>For WildFly 8, the default data source is bound to the JDBC resource <literal>what name</literal>.</simpara>
<simpara>Clicking back and forth between &#8216;Design&#8217; and &#8216;Source&#8217; view may prompt
the error shown below:</simpara>
<figure>
<title>Missing server error from persistence.xml</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/3.4-missing-server.png"/>
    </imageobject>
    <textobject><phrase>3.4 missing server</phrase></textobject>
  </mediaobject>
</figure>

<simpara>This will get resolved when we run the application. Click on &#8216;OK&#8217; to
dismiss the dialog.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Schema Generation:</emphasis> JPA 2.1 defines a new set of
<literal>javax.persistence.schema-generation.*</literal> properties that can be used to
generate database artifacts like tables, indexes, and constraints in a
database schema. This helps in prototyping of your application where the
required artifacts are generated either prior to application deployment
or as part of <literal>EntityManagerFactory</literal> creation. This feature will allow
your JPA domain object model to be directly generated in a database. The
generated schema may need to be tuned for actual production environment.</simpara>
<simpara>The &#8220;persistence.xml&#8221; in the application has the following
<literal>javax.persistence.schema-generation.*</literal> properties. Their meaning and
possible values are explained:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Property</entry>
        
        <entry align="left" valign="top">Meaning</entry>
        
        <entry align="left" valign="top">Values</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>javax.persistence.schema-generation.database.action</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specifies the action to be taken by the persistence provider with regard
to the database artifacts.</simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>none</literal>, <literal>create</literal>, <literal>drop-and-create</literal>, <literal>drop</literal></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>javax.persistence.schema-generation.create-source</literal>
<literal>javax.persistence.schema-generation.drop-source</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specifies whether the creation or deletion of database artifacts is to
occur on the basis of the object/relational mapping metadata, DDL
script, or a combination of the two.</simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>metadata</literal>, <literal>script</literal>, <literal>metadata-then-script</literal>, <literal>script-then-metadata</literal></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>javax.persistence.schema-generation.create-script-source</literal>
<literal>javax.persistence.schema-generation.drop-script-source</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specifies a <literal>java.IO.Reader</literal> configured for reading of the SQL script or a
string designating a file URL for the SQL script to create or delete
database artifacts.</simpara></entry>
        
        <entry align="left" valign="top"></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>javax.persistence.sql-load-script-source</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specifies a <literal>java.IO.Reader</literal> configured for reading of the SQL load script
for database initialization or a string designating a file URL for the
script.</simpara></entry>
        
        <entry align="left" valign="top"></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>Refer to the <ulink url="http://jcp.org/en/jsr/detail?id=338">JPA 2.1 Specification</ulink>
for a complete understanding of these properties.</simpara>
<simpara>In the application, the scripts are bundled in the WAR file in
&#8216;META-INF&#8217; directory. As the location of these scripts is specified as a
URL, the scripts may be loaded from outside the WAR file as well.</simpara>
<simpara>Feel free to open &#8216;create.sql&#8217;, &#8216;drop.sql&#8217; and &#8216;load.sql&#8217; and read
through the SQL scripts. The database schema is shown.</simpara>
<figure>
<title>Database schema</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/3.5-schema.png"/>
    </imageobject>
    <textobject><phrase>3.5 schema</phrase></textobject>
  </mediaobject>
</figure>

<simpara>This folder also contains &#8216;sales.csv&#8217; which carries some comma-separated
data, and is used later in the application.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JPA entities, Stateless EJBs, and REST endpoints</emphasis>: Expand <literal>Source
Packages'. The package `org.javaee7.movieplex7.entities</literal> contains the
JPA entities corresponding to the database table definitions. Each JPA
entity has several convenient <literal>@NamedQuery</literal> defined and uses Bean
Validation constraints to enforce validation.</simpara>
<simpara>The package <literal>org.javaee7.movieplex7.rest</literal> contains stateless EJBs
corresponding to different JPA entities.</simpara>
<simpara>Each EJB has methods to perform CRUD operations on the JPA entity and
convenience query methods. Each EJB is also EL-injectable (@Named) and
published as a REST endpoint (@Path). The AplicationConfig class defines
the base path of REST endpoint. The path for the REST endpoint is the
same as the JPA entity class name.</simpara>
<simpara>The mapping between JPA entity classes, EJB classes, and the URI of the
corresponding REST endpoint is shown.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">JPA Entity Class</entry>
        
        <entry align="left" valign="top">EJB Class</entry>
        
        <entry align="left" valign="top">RESTful Path</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>Movie</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>MovieFacadeREST</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis>/webresources/movie</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>Sales</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>SalesFacadeREST</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis>/webresources/sales</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>ShowTiming</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>ShowTimingFacadeREST</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis>/webresources/showtiming</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>Theater</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>TheaterFacadeREST</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis>/webresources/theater</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>Timeslot</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><literal>TimeslotFacadeREST</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis>/webresources/timeslot</emphasis></simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>Feel free to browse through the code.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JSF pages</emphasis>: &#8216;WEB-INF/template.xhtml&#8217; defines the template of the
web page and has a header, left navigation bar, and a main content
section. &#8216;index.xhtml&#8217; uses this template and the EJBs to display the
number of movies and theaters.</simpara>
<simpara>Java EE 7 enables CDI discovery of beans by default. No &#8216;beans.xml&#8217; is
required in &#8216;WEB-INF&#8217;. This allows all beans with bean defining
annotation, i.e. either a bean with an explicit CDI scope or EJBs to be
available for injection.</simpara>
<simpara>Note, &#8216;template.xhtml&#8217; is in &#8216;WEB-INF&#8217; folder as it allows the template
to be accessible from the pages bundled with the application only. If it
were bundled with rest of the pages then it would be accessible outside
the application and thus allowing other external pages to use it as
well.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Run the sample</emphasis>: Right-click on the project and select &#8216;Run&#8217;.
This will download all the maven dependencies on your machine, build a
WAR file, deploy on
WildFly 8
, and show the URL
<ulink url="http://localhost:8080/movieplex7">localhost:8080/movieplex7</ulink> in the
default browser configured in NetBeans. Note that this could take a
while if you have never built a Maven application on your machine.</simpara>
<tip>
<simpara>The project will show red squiggly lines in the source code indicating
that the classes cannot be resolved. This is expected before the
dependencies are downloaded. However these references will be resolved
correctly after the dependencies are downloaded during project building.</simpara>
</tip>

<simpara>During the first run, the IDE will ask you to select a deployment server.
Choose the configured WildFly server and click on &#8216;OK&#8217;.</simpara>
<figure>
<title>WildFly deployment server</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/3.6-wildfly-server.png"/>
    </imageobject>
    <textobject><phrase>3.6 wildfly server</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The output looks like as shown.</simpara>
<figure>
<title>Application main page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/3.8-first-page.png"/>
    </imageobject>
    <textobject><phrase>3.8 first page</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

</chapter>
<chapter id="websocket">
<title>Chat Room (Java API for WebSocket)</title>
<simpara><emphasis role="strong">Purpose</emphasis>: Build a chat room for viewers. In doing so several new
features of Java API for WebSocket 1.0 will be introduced and
demonstrated by using them in the application.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 30-45 mins</simpara>
<simpara>WebSocket provide a full-duplex and bi-directional communication
protocol over a single TCP connection. WebSocket is a combination of
<ulink url="http://tools.ietf.org/html/rfc6455">IETF RFC 6455</ulink>
<ulink url="http://tools.ietf.org/html/rfc6455">Protocol</ulink> and
<ulink url="http://www.w3.org/TR/websockets/">W3C JavaScript WebSocket API</ulink> (a
Candidate Recommendation as of this writing). The protocol defines an
opening handshake and data transfer. The API enables Web pages to use
the WebSocket protocol for two-way communication with the remote host.</simpara>
<simpara><ulink url="http://jcp.org/en/jsr/detail?id=356">JSR 356</ulink> defines a standard API for
creating WebSocket applications in the Java EE 7 Platform. The JSR
provides support for:</simpara>
<itemizedlist>
<listitem>
<simpara>Create WebSocket endpoint using annotations and interface</simpara>
</listitem>
<listitem>
<simpara>Initiating and intercepting WebSocket events</simpara>
</listitem>
<listitem>
<simpara>Creation and consumption of WebSocket text and binary messages</simpara>
</listitem>
<listitem>
<simpara>Configuration and management of WebSocket sessions</simpara>
</listitem>
<listitem>
<simpara>Integration with Java EE security model</simpara>
</listitem>
</itemizedlist>

<simpara>This section will build a chat room for movie viewers.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Right-click on &#8216;Source Packages&#8217; , select &#8216;New&#8217;, &#8216;Java Class&#8217;.
Give the class name as &#8216;ChatServer&#8217;, package as
&#8216;org.javaee7.movieplex7.chat&#8217;, and click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Change the class such that it looks like:</simpara>
<programlisting language="java" linenumbering="unnumbered">@ServerEndpoint("/websocket")
public class ChatServer {
    private static final Set&lt;Session&gt; peers =
               Collections.synchronizedSet(new HashSet&lt;Session&gt;());

    @OnOpen
    public void onOpen(Session peer) {
        peers.add(peer);
    }

    @OnClose
    public void onClose(Session peer) {
        peers.remove(peer);
    }

    @OnMessage
    public void message(String message, Session client)
           throws IOException, EncodeException {
        for (Session peer : peers) {
            peer.getBasicRemote().sendText(message);
        }
    }
}</programlisting>

<simpara>In this code:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><literal>@ServerEndpoint</literal> decorates the class to be a WebSocket endpoint. The
value defines the URI where this endpoint is published.</simpara>
</listitem>
<listitem>
<simpara><literal>@OnOpen</literal> and <literal>@OnClose</literal> decorate the methods that must be called when
WebSocket session is opened or closed. The peer parameter defines the
client requesting connection initiation and termination.</simpara>
</listitem>
<listitem>
<simpara><literal>@OnMessage</literal> decorates the message that receives the incoming WebSocket
message. The first parameter, message, is the payload of the message.
The second parameter, <literal>client</literal>, defines the other end of the WebSocket
connection. The method implementation transmits the received text message to
all clients connected to this endpoint.</simpara>
<simpara>Resolve the imports by right-clicking in the editor and selecting &#8216;Fix
Imports&#8217; or (<keycombo><keycap>Command</keycap><keycap>Shift</keycap><keycap>I</keycap></keycombo> shortcut on OSX or <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>I</keycap></keycombo> on
Windows).</simpara>
<warning>
<simpara>Make sure to pick <literal>java.websocket.Session</literal> for resolving imports. This is not the default option shown by NetBeans.</simpara>
</warning>

<figure>
<title>javax.websocket.Session import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/4.2-imports.png"/>
    </imageobject>
    <textobject><phrase>4.2 imports</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Right-click again in the editor pane and select &#8216;Format&#8217; to format your
code.</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>In &#8216;Web Pages&#8217;, select &#8216;New&#8217;, &#8216;Folder&#8217;, give the folder name as
&#8216;chat&#8217; and click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Right-click on the newly created folder, select &#8216;New&#8217;, &#8216;Other&#8217;,
&#8216;Java Server Faces&#8217;, &#8216;Facelets Template Client&#8217;, give the File Name as
&#8216;chatroom&#8217;. Click on &#8216;Browse&#8217; next to &#8216;Template:&#8217;, expand &#8216;Web Pages&#8217;,
&#8216;WEB-INF&#8217;, select &#8216;template.xhtml&#8217;, and click on &#8216;Select File&#8217;. Click on
&#8216;Finish&#8217;.</simpara>
<figure>
<title>Choose template</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/4.4-template.png"/>
    </imageobject>
    <textobject><phrase>4.4 template</phrase></textobject>
  </mediaobject>
</figure>

<simpara>In this file, remove &lt;ui:define&gt; sections where name attribute value is
&#8216;top&#8217; and &#8216;left&#8217;. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;form action=""&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        Chat Log&lt;br/&gt;
                        &lt;textarea readonly="true" rows="6" cols="50" id="chatlog"&gt;&lt;/textarea&gt;
                    &lt;/td&gt;
                    &lt;td&gt;
                        Users&lt;br/&gt;
                        &lt;textarea readonly="true" rows="6" cols="20" id="users"&gt;&lt;/textarea&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td colspan="2"&gt;
                        &lt;input id="textField" name="name" value="Duke" type="text"/&gt;
                        &lt;input onclick="join();" value="Join" type="button"/&gt;
                        &lt;input onclick="send_message();" value="Send" type="button"/&gt;&lt;p/&gt;
                        &lt;input onclick="disconnect();" value="Disconnect" type="button"/&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/form&gt;
        &lt;div id="output"&gt;&lt;/div&gt;
            &lt;script language="javascript" type="text/javascript"
                src="${facesContext.externalContext.requestContextPath}/chat/websocket.js"&gt;&lt;/script&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>The code builds an HTML form that has two textareas – one to display the
chat log and the other to display the list of users currently logged. A
single text box is used to take the user name or the chat message.
Clicking on &#8216;Join&#8217; button takes the value as user name and clicking on
&#8216;Send&#8217; takes the value as chat message.</simpara>
<simpara>JavaScript methods are invoked
when these buttons are clicked and these are explained in the next
section. The chat messages are sent and received as WebSocket payloads.
There is an explicit button to disconnect the WebSocket connection.
<literal>output</literal> div is the placeholder for status messages. The WebSocket
initialization occurs in &#8216;websocket.js&#8217; included at the bottom of the
fragment.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;chat&#8217; in &#8216;Web Pages&#8217;, select &#8216;New&#8217;, &#8216;Other&#8217;, &#8216;Web&#8217;
categories, &#8216;JavaScript File&#8217; file type. Click on &#8216;Next&#8217;.</simpara>
<simpara>Give the name as &#8216;websocket&#8217; and click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Edit the contents of &#8216;websocket.js&#8217; such that it looks like:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">var wsUri = 'ws://' + document.location.host
            + document.location.pathname.substr(0,
              document.location.pathname.indexOf("/faces")) +
              '/websocket';
console.log(wsUri);

var websocket = new WebSocket(wsUri);
var textField = document.getElementById("textField");
var users = document.getElementById("users");
var chatlog = document.getElementById("chatlog");
var username;

websocket.onopen = function(evt) { onOpen(evt); };
websocket.onmessage = function(evt) { onMessage(evt); };
websocket.onerror = function(evt) { onError(evt); };
websocket.onclose = function(evt) { onClose(evt); };

var output = document.getElementById("output");

function join() {
    username = textField.value;
    websocket.send(username + " joined");
}

function send_message() {
    websocket.send(username + ": " + textField.value);
}

function onOpen() {
    writeToScreen("CONNECTED");
}

function onClose() {
    writeToScreen("DISCONNECTED");
}

function onMessage(evt) {
    writeToScreen("RECEIVED: " + evt.data);
    if (evt.data.indexOf("joined") !== -1) {
        users.innerHTML += evt.data.substring(0, evt.data.indexOf(" joined")) + "\n";
    } else {
        chatlog.innerHTML += evt.data + "\n";
    }
}

function onError(evt) {
    writeToScreen('&lt;span style="color: red;"&gt;ERROR:&lt;/span&gt; ' + evt.data);
}

function disconnect() {
    websocket.close();
}

function writeToScreen(message) {
    var pre = document.createElement("p");
    pre.style.wordWrap = "break-word";
    pre.innerHTML = message;
    output.appendChild(pre);
}</programlisting>

<simpara>The WebSocket endpoint URI is calculated by using standard JavaScript
variables and appending the URI specified in the <literal>ChatServer</literal> class.
WebSocket is initialized by calling new <literal>WebSocket(...)</literal>. Event handlers are
registered for lifecycle events using <literal>onXXX</literal> messages. The listeners
registered in this script are explained in the table.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="25*"/>
    
    <colspec colname="col_2" colwidth="75*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Listeners</entry>
        
        <entry align="left" valign="top">Called When</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>onOpen(evt)</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>WebSocket connection is initiated</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>onMessage(evt)</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>WebSocket message is received</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>onError(evt)</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Error occurs during the communication</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><literal>onClose(evt)</literal></simpara></entry>
        
        <entry align="left" valign="top"><simpara>WebSocket connection is terminated</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>Any relevant data is passed along as parameter to the function. Each
method prints the status on the browser using <literal>writeToScreen</literal> utility
method. The join method sends a message to the endpoint
that a particular user has joined. The endpoint then broadcasts the
message to all the listening clients. The <literal>send_message</literal> method appends
the logged in user name and the value of the text field and broadcasts
to all the clients similarly. The <literal>onMessage</literal> method updates the list of
logged in users as well.</simpara>
</listitem>
<listitem>
<simpara>Edit &#8216;WEB-INF/template.xhtml&#8217; and change:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h:outputLink value="item2.xhtml"&gt;Item 2&lt;/h:outputLink&gt;</programlisting>

<simpara>to</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h:outputLink
    value="${facesContext.externalContext.requestContextPath}/faces/chat/chatroom.xhtml"&gt;
    Chat Room
&lt;/h:outputLink&gt;</programlisting>

<simpara>The <literal>outputLink</literal> tag renders an HTML anchor tag with an <literal>href</literal> attribute.
<literal>${facesContext.externalContext.requestContextPath}</literal> provides the request
URI that identifies the web application context for this request. This
allows the links in the left navigation bar to be fully-qualified URLs.</simpara>
</listitem>
<listitem>
<simpara>Run the project by right clicking on the project and selecting
&#8216;Run&#8217;. The browser shows
<ulink url="http://localhost:8080/movieplex7">localhost:8080/movieplex7</ulink>.</simpara>
<figure>
<title>Chatroom link on main page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/4.6-chatroom.png"/>
    </imageobject>
    <textobject><phrase>4.6 chatroom</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on &#8216;Chat Room&#8217; to see the output.</simpara>
<simpara>The &#8216;CONNECTED&#8217; status message is shown and indicates that the WebSocket
connection with the endpoint is established.</simpara>
<figure>
<title>Chatroom output</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/4.8-chatroom.png"/>
    </imageobject>
    <textobject><phrase>4.8 chatroom</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Please make sure your browser supports WebSocket in order for this page
to show up successfully. Chrome 14.0+, Firefox 11.0+, Safari 6.0+, and
IE 10.0+ are the browsers that support WebSocket. A complete list of
supported browsers is available at
<ulink url="http://caniuse.com/websockets">caniuse.com/websockets</ulink>.</simpara>
<simpara>Open the URI <ulink url="http://localhost:8080/movieplex7">localhost:8080/movieplex7</ulink>
in another browser window. Enter &#8216;Duke&#8217; in the text box in the first
browser and click &#8216;Join&#8217;.</simpara>
<figure>
<title>Chatroom with single user</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/4.8-chatroom-joined.png"/>
    </imageobject>
    <textobject><phrase>4.8 chatroom joined</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Notice that the user list and the status message in both the browsers
gets updated. Enter &#8216;James&#8217; in the text box of the second browser and
click on &#8216;Join&#8217;. Once again the user list and the status message in both
the browsers is updated. Now you can type any messages in any of the
browser and click on &#8216;Send&#8217; to send the message.</simpara>
<simpara>The output from two different browsers after the initial greeting looks
like as shown.</simpara>
<figure>
<title>Chatroom with two users</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/4.8-chatroom-two-browsers.png"/>
    </imageobject>
    <textobject><phrase>4.8 chatroom two browsers</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Here it shows output from Chrome on the top and Firefox on the bottom.</simpara>
<simpara>Chrome Developer Tools or Firebug in Firefox can be used to monitor
WebSocket traffic.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="batch">
<title>Ticket Sales (Batch Applications for the Java Platform)</title>
<simpara><emphasis role="strong">Purpose</emphasis>: Read the total sales for each show and populate the database.
In doing so several new features of Java API for Batch Processing 1.0
will be introduced and demonstrated by using them in the application.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 30-45 mins</simpara>
<simpara>Batch Processing is execution of series of &#8216;jobs&#8217; that is suitable for
non-interactive, bulk-oriented and long-running tasks. Batch
Applications for the Java Platform (JSR 352) will define a programming
model for batch applications and a runtime for scheduling and executing
jobs.</simpara>
<figure>
<title>Introduction to Batch</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/5.0-batch-intro.png"/>
    </imageobject>
    <textobject><phrase>5.0 batch intro</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The core concepts of Batch Processing are:</simpara>
<itemizedlist>
<listitem>
<simpara>A <emphasis role="strong">Job</emphasis> is an instance that encapsulates an entire batch process. A
job is typically put together using a Job Specification Language and
consists of multiple steps. The Job Specification Language for JSR 352
is implemented with XML and is referred as &#8216;Job XML&#8217;.</simpara>
</listitem>
<listitem>
<simpara>A <emphasis role="strong">Step</emphasis> is a domain object that encapsulates an independent,
sequential phase of a job. A step contains all of the information
necessary to define and control the actual batch processing.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JobOperator</emphasis> provides an interface to manage all aspects of job
processing, including operational commands, such as start, restart, and
stop, as well as job repository commands, such as retrieval of job and
step executions.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JobRepository</emphasis> holds information about jobs current running and jobs
that run in the past. JobOperator provides access to this repository.</simpara>
</listitem>
<listitem>
<simpara>Reader-Processor-Writer pattern is the primary pattern and is called
as <emphasis role="strong">Chunk-oriented<emphasis role="strong"> </emphasis>Processing</emphasis>. In this, <emphasis role="strong">ItemReader</emphasis> reads one item
at a time, <emphasis role="strong">ItemProcessor</emphasis> processes the item based upon the business
logic, such as calculate account balance and hands it
to <emphasis role="strong">ItemWriter</emphasis> for aggregation. Once the <emphasis>chunk</emphasis> numbers of items are
aggregated, they are written out, and the transaction is committed.</simpara>
</listitem>
</itemizedlist>

<simpara>This section will read the cumulative sales for each show from a CSV
file and populate them in a database.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Right-click on Source Packages, select &#8216;New&#8217;, &#8216;Java Package&#8217;,
specify the value as &#8216;org.javaee7.movieplex7.batch&#8217;, and click on
&#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Right-click on newly created package, select &#8216;New&#8217;, &#8216;Java Class&#8217;,
specify the name as &#8216;SalesReader&#8217;. Make this class extend from
&#8216;AbstractItemReader&#8217; by changing the class definition and add:</simpara>
<programlisting language="java" linenumbering="unnumbered">extends AbstractItemReader</programlisting>

<simpara><literal>AbstractItemReader</literal> is an abstract class that implements <literal>ItemReader</literal>
interface. The <literal>ItemReader</literal> interface defines methods that read a stream
of items for chunk processing. This reader implementation returns a
String item type as indicated in the class definition.</simpara>
<simpara>Add <literal>@Named</literal> as a class-level annotations and it allows the bean to be
injected in Job XML. Add <literal>@Dependent</literal> as another class-level annotation to
mark this bean as a bean defining annotation so that this bean is
available for injection.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Override <literal>open()</literal> method to initialize the reader by adding the following code:</simpara>
<programlisting language="java" linenumbering="unnumbered">private BufferedReader reader;

public void open(Serializable checkpoint) throws Exception {
    reader = new BufferedReader(
        new InputStreamReader(
        Thread.currentThread()
            .getContextClassLoader()
            .getResourceAsStream("META-INF/sales.csv")));
}</programlisting>

<simpara>This method initializes a BufferedReader from &#8216;META-INF/sales.csv&#8217; that
is bundled with the application.</simpara>
<simpara>Sampling of the first few lines from &#8216;sales.csv&#8217; is shown below:</simpara>
<programlisting language="csv" linenumbering="unnumbered">1,500.00
2,660.00
3,80.00
4,470.00
5,1100.x0</programlisting>

<simpara>Each line has a show identifier comma separated by the total sales for
that show. Note that the last line (5<superscript>th</superscript> record in the sample) has an
intentional typo. In addition, 17<superscript>th</superscript> record also has an additional
typo. The lab will use these lines to demonstrate how to handle parsing
errors.</simpara>
</listitem>
<listitem>
<simpara>Override the following method from the abstract class:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Override
public String readItem() {
    String string = null;
    try {
        string = reader.readLine();
    } catch (IOException ex) {
        ex.printStackTrace();
    }
    return string;
}</programlisting>

<simpara>The <literal>readItem</literal> method returns the next item from the stream. It returns
<literal>null</literal> to indicate end of stream. Note end of stream indicates end of chunk,
so the current chunk will be committed and the step will end.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;org.javaee7.movieplex7.batch&#8217; package, select
&#8216;New&#8217;, &#8216;Java Class&#8217;, specify the name as &#8216;SalesProcessor&#8217;. Change the
class definition and add:</simpara>
<programlisting language="java" linenumbering="unnumbered">implements ItemProcessor</programlisting>

<simpara><literal>ItemProcessor</literal> is an interface that defines a method that is used to
operate on an input item and produce an output item. This processor
accepts a String input item from the reader, <literal>SalesReader</literal> in our case,
and returns a <literal>Sales</literal> instance to the writer (coming shortly). <literal>Sales</literal> is
the pre-packaged JPA entity with the application starter source code.</simpara>
<simpara>Add <literal>@Named</literal> and <literal>@Dependent</literal> as class-level annotations so that it allows
the bean to be injected in Job XML.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Add implementation of the abstract method from the interface as:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Override
public Sales processItem(Object s) {
    Sales sales = new Sales();
    StringTokenizer tokens = new StringTokenizer((String)s, ",");
    sales.setId(Integer.parseInt(tokens.nextToken()));
    sales.setAmount(Float.parseFloat(tokens.nextToken()));

    return sales;
}</programlisting>

<simpara>This method takes a <literal>String</literal> parameter coming from the <literal>SalesReader</literal>, parses
the value, populates them in the <literal>Sales</literal> instance, and returns it. This is
then aggregated with the writer.</simpara>
<simpara>The method can return null indicating that the item should not be
aggregated. For example, the parsing errors can be handled within the
method and return null if the values are not correct. However this
method is implemented where any parsing errors are thrown as exception.
Job XML can be instructed to skip these exceptions and thus that
particular record is skipped from aggregation as well (shown later).</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Right-click on <literal>org.javaee7.movieplex7.batch</literal> package, select
&#8216;New&#8217;, &#8216;Java Class&#8217;, specify the name as &#8216;SalesWriter&#8217;. Change the
class definition and add:</simpara>
<programlisting language="java" linenumbering="unnumbered">extends AbstractItemWriter</programlisting>

<simpara><literal>AbstractItemWriter</literal> is an abstract class that implements <literal>ItemWriter</literal>
interface. The ItemWriter interface defines methods that write to a
stream of items for chunk processing. This writer writes a list of <literal>Sales</literal>
items.</simpara>
<simpara>Add <literal>@Named</literal> and <literal>@Dependent</literal> as class-level annotations so that it allows
the bean to be injected in Job XML.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Inject <literal>EntityManager</literal> as:</simpara>
<programlisting language="java" linenumbering="unnumbered">@PersistenceContext EntityManager em;</programlisting>

<simpara>Override <literal>writeItems</literal> method from the abstract class by adding the following code:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Override
@Transactional
public void writeItems(List list) {
    for (Sales s : (List&lt;Sales&gt;)list) {
        em.persist(s);
    }
}</programlisting>

<simpara>Batch runtime aggregates the list of <literal>Sales</literal> instances returned from the
<literal>SalesProessor</literal> and makes it available as List in this method. This method
iterates over the list and persist each item in the database.</simpara>
<simpara>The method also specifies <literal>@Transactional</literal> as a method level annotation.
This is a new annotation introduced by JTA 1.2 that provides the ability
to control transaction boundaries on CDI managed beans. This provides
the semantics of EJB transaction attributes in CDI beans without
dependencies such as RMI. This support is implemented via an
implementation of a CDI interceptor that conducts the necessary
suspending, resuming, etc. </simpara>
<simpara>In this case, a transaction is automatically started before the method
is called, committed if no checked exceptions are thrown, and rolled
back if runtime exceptions are thrown. This behavior can be overridden
using <literal>rollbackOn</literal> and <literal>dontRollbackOn</literal> attributes of the annotation.</simpara>
<note>
<simpara>Each chunk is processed within a container-managed transaction already.
There is really no need for <literal>@Transactional</literal> on <literal>writeItems</literal> method but
shows a usage for the annotation.</simpara>
</note>

<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Create Job XML that defines the job, step, and chunk.</simpara>
<simpara>In &#8216;Files&#8217; tab, expand the project &#8594; &#8216;src&#8217; &#8594; &#8216;main&#8217; &#8594; &#8216;resources&#8217;,
right-click on &#8216;META-INF&#8217;, select &#8216;New&#8217;, &#8216;Folder&#8217;, specify
the name as &#8216;batch-jobs&#8217;, and click on &#8216;Finish&#8217;.</simpara>
<simpara>Right-click on the newly created folder, select &#8216;New&#8217;, &#8216;Other&#8217;, select
&#8216;XML&#8217;, &#8216;XML Document&#8217;, click on &#8216;Next &gt;&#8217;, give the name as &#8216;eod-sales&#8217;,
click on &#8216;Next&#8217;, take the default, and click on &#8216;Finish&#8217;.</simpara>
<simpara>Replace contents of the file with the following:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;job id="endOfDaySales"
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    version="1.0"&gt;
    &lt;step id="populateSales"&gt;
        &lt;chunk item-count="3" skip-limit="5"&gt;
            &lt;reader ref="salesReader"/&gt;
            &lt;processor ref="salesProcessor"/&gt;
            &lt;writer ref="salesWriter"/&gt;
            &lt;skippable-exception-classes&gt;
                &lt;include class="java.lang.NumberFormatException"/&gt;
            &lt;/skippable-exception-classes&gt;
        &lt;/chunk&gt;
    &lt;/step&gt;
&lt;/job&gt;</programlisting>

<simpara>This code shows that the job has one step of chunk type. The <literal>&lt;reader&gt;</literal>,
<literal>&lt;processor&gt;</literal>, and <literal>&lt;writer&gt;</literal> elements define the CDI bean name of the
implementations of <literal>ItemReader</literal>, <literal>ItemProcessor</literal>, and <literal>ItemWriter</literal> interfaces.
The <literal>item-count</literal> attribute defines that 3 items are
read/processed/aggregated and then given to the writer. The entire
reader/processor/writer cycle is executed within a transaction.</simpara>
<simpara>The <literal>&lt;skippable-exception-classes&gt;</literal> element specifies a set of exceptions to
be skipped by chunk processing.</simpara>
<simpara>CSV file used for this lab has intentionally introduced couple of typos
that would generate <literal>NumberFormatException</literal>. Specifying this element
allows skipping the exception, ignore that particular element, and
continue processing. If this element is not specified then the batch
processing will halt. The <literal>skip-limit</literal> attribute specifies the number of
exceptions a step will skip.</simpara>
</listitem>
<listitem>
<simpara>Lets invoke the batch job.</simpara>
<simpara>In &#8216;Projects&#8217; tab, right-click on &#8216;org.javaee7.movieplex7.batch&#8217; package, select &#8216;New&#8217;,
&#8216;Java Class&#8217;. Enter the name as &#8216;SalesBean&#8217; and click on &#8216;Finish&#8217;
button.</simpara>
<simpara>Add the following code to the bean:</simpara>
<programlisting language="java" linenumbering="unnumbered">public void runJob() {
    try {
        JobOperator jo = BatchRuntime.getJobOperator();
        long jobId = jo.start("eod-sales", new Properties());
        System.out.println("Started job: with id: " + jobId);
    } catch (JobStartException ex) {
        ex.printStackTrace();
    }
}</programlisting>

<simpara>This method uses <literal>BatchRuntime</literal> to get an instance of <literal>JobOperator</literal>, which
is then used to start the job. <literal>JobOperator</literal> is the interface for
operating on batch jobs. It can be used to start, stop, and restart
jobs. It can additionally inspect job history, to discover what jobs are
currently running and what jobs have previously run.</simpara>
<simpara>Add <literal>@Named</literal> and <literal>@RequestScoped</literal> as class-level annotations. This allows
the bean to be injectable in an EL expression.</simpara>
<simpara>Resolve the imports.</simpara>
<figure>
<title>RequestScoped import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/5.10-imports.png"/>
    </imageobject>
    <textobject><phrase>5.10 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Inject <literal>EntityManagerFactory</literal> in the class as:</simpara>
<programlisting language="java" linenumbering="unnumbered">@PersistenceUnit EntityManagerFactory emf;</programlisting>

<simpara>and add the following method:</simpara>
<programlisting language="java" linenumbering="unnumbered">public List&lt;Sales&gt; getSalesData() {
    return emf.
        createEntityManager().
        createNamedQuery("Sales.findAll", Sales.class).
        getResultList();
}</programlisting>

<simpara>This method uses a pre-defined <literal>@NamedQuery</literal> to query the database and
return all the rows from the table.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;Web Pages&#8217;, select &#8216;New&#8217;, &#8216;Folder&#8217;, specify the
name as &#8216;batch&#8217;, and click on &#8216;Finish&#8217;.</simpara>
<simpara>Right-click on the newly created folder, select &#8216;New&#8217;, &#8216;Other&#8217;,
&#8216;JavaServer Faces&#8217;, &#8216;Facelets Template Client&#8217;, and click on &#8216;Next &gt;&#8217;.</simpara>
<simpara>Give the File Name as &#8216;sales&#8217;. Click on &#8216;Browse&#8217; next to &#8216;Template:&#8217;,
expand &#8216;Web Pages&#8217;, &#8216;WEB-INF&#8217;, select &#8216;template.xhtml&#8217;, and click on
&#8216;Select File&#8217;. Click on &#8216;Finish&#8217;.</simpara>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections where name attribute value is
&#8216;top&#8217; and &#8216;left&#8217;. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;h1&gt;Movie Sales&lt;/h1&gt;
        &lt;h:form&gt;
            &lt;h:dataTable value="#{salesBean.salesData}" var="s" border="1"&gt;
                &lt;h:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Show ID" /&gt;
                    &lt;/f:facet&gt;
                    #{s.id}
                &lt;/h:column&gt;
                &lt;h:column&gt;
                    &lt;f:facet name="header"&gt;
                        &lt;h:outputText value="Sales" /&gt;
                    &lt;/f:facet&gt;
                    #{s.amount}
                &lt;/h:column&gt;
            &lt;/h:dataTable&gt;
            &lt;h:commandButton
                value="Run Job"
                action="sales"
                actionListener="#{salesBean.runJob()}"/&gt;
            &lt;h:commandButton
                value="Refresh"
                action="sales" /&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>This code displays the show identifier and sales from that show in a
table by invoking <literal>SalesBean.getSalesData()</literal>. First command button allows
invoking the job that processes the CSV file and populates the database.
The second command button refreshes the page.</simpara>
<simpara>Right-click on the yellow bulb to fix namespace prefix/URI mapping for <literal>h:</literal>. This
needs to be repeated for <literal>f:</literal> prefix.</simpara>
</listitem>
<listitem>
<simpara>Add the following code in <literal>template.xhtml</literal> along with other &lt;outputLink&gt;s:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;p/&gt;&lt;h:outputLink
    value="${facesContext.externalContext.requestContextPath}/faces/batch/sales.xhtml"&gt;
    Sales
    &lt;/h:outputLink&gt;</programlisting>

</listitem>
<listitem>
<simpara>Run the project to see the output as shown.</simpara>
<figure>
<title>Sales link on main page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/5.14-sales.png"/>
    </imageobject>
    <textobject><phrase>5.14 sales</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Notice, a new &#8216;Sales&#8217; entry is displayed in the left navigation bar.</simpara>
</listitem>
<listitem>
<simpara>Click on &#8216;Sales&#8217; to see the output as shown.</simpara>
<figure>
<title>Movie Sales page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/5.15-sales.png"/>
    </imageobject>
    <textobject><phrase>5.15 sales</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The empty table indicates that there is no sales data in the database.</simpara>
</listitem>
<listitem>
<simpara>Click on &#8216;Run Job&#8217; button to initiate data processing of CSV
file. Look for &#8216;Waiting for localhost&#8217; in the browser status bar,
wait for a couple of seconds for the processing to finish, and then
click on &#8216;Refresh&#8217; button to see the updated output as shown.</simpara>
<figure>
<title>Movie Sales output page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/5.16-sales-output.png"/>
    </imageobject>
    <textobject><phrase>5.16 sales output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Now the table is populated with the sales data.</simpara>
<simpara>Note that record 5 is missing from the table, as this records did not
have correct numeric entries for the sales total. The Job XML for the
application explicitly mentioned to skip such errors.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="jaxrs">
<title>View and Delete Movie (Java API for RESTful Web Services)</title>
<simpara><emphasis role="strong">Purpose</emphasis>: View, and delete a movie. In doing so several new features of
JAX-RS 2 will be introduced and demonstrated by using them in the
application.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 30-45 mins</simpara>
<simpara>JAX-RS 2 defines a standard API to create, publish, and invoke a REST
endpoint. JAX-RS 2 adds several new features to the API:</simpara>
<itemizedlist>
<listitem>
<simpara>Client API that can be used to access Web resources and provides
integration with JAX-RS Providers. Without this API, the users need to
use a low-level HttpUrlConnection to access the REST endpoint.</simpara>
</listitem>
<listitem>
<simpara>Asynchronous processing capabilities in Client and Server that enables
more scalable applications.</simpara>
</listitem>
<listitem>
<simpara>Message Filters and Entity Interceptors as well-defined extension
points to extend the capabilities of an implementation.</simpara>
</listitem>
<listitem>
<simpara>Validation constraints can be specified to validate the parameters and
return type.</simpara>
</listitem>
</itemizedlist>

<simpara>This section will provide the ability to view all the movies, details of
a selected movie, and delete an existing movie using the JAX-RS Client
API.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Right-click on &#8216;Source Packages&#8217;, select &#8216;New&#8217;, &#8216;Java Class&#8217;.
Give the class name as &#8216;MovieClientBean&#8217;, package as
&#8216;org.javaee7.movieplex7.client&#8217;, and click on &#8216;Finish&#8217;.</simpara>
<simpara>This bean will be used to invoke the REST endpoint.</simpara>
</listitem>
<listitem>
<simpara>Add <literal>@Named</literal> and <literal>@RequestScoped</literal> class-level annotations. This allows
the class to be injected in an EL expression and also defines the bean
to be automatically activated and passivated with the request.</simpara>
<simpara>Resolve the imports.</simpara>
<warning>
<simpara>Make sure to pick <literal>javax.enterprise.context.RequestScoped</literal> class.</simpara>
</warning>

<figure>
<title>RequestScoped import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/6.2-imports.png"/>
    </imageobject>
    <textobject><phrase>6.2 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Add the following code to the class:</simpara>
<programlisting language="java" linenumbering="unnumbered">Client client;
WebTarget target;

@Inject HttpServletRequest httpServletRequest;

@PostConstruct
public void init() {
    client = ClientBuilder.newClient();
    target = client
                .target("http://" +
                httpServletRequest.getLocalName() +
                ":" +
                httpServletRequest.getLocalPort() +
                "/" +
                httpServletRequest.getContextPath() +
                "/webresources/movie/");

}

@PreDestroy
public void destroy() {
    client.close();
}</programlisting>

<simpara><literal>ClientBuilder</literal> is the main entry point to the Client API. It uses a
fluent builder API to invoke REST endpoints. A new <literal>Client</literal> instance is
created using the default client builder implementation provided by the
JAX-RS implementation provider. Client are heavy-weight objects that
manage the client-side communication infrastructure. It is highly
recommended to create only required number of instances of Client and
close it appropriately.</simpara>
<simpara>In this case, <literal>Client</literal> instance is created and destroyed in the lifecycle
callback methods. The endpoint URI is set on this instance by calling
the target method. Note that the endpoint address is dynamically created
by injecting an instance of <literal>HttpServletRequest</literal>. This is a new feature
added in CDI 1.1</simpara>
</listitem>
<listitem>
<simpara>Add the following method to the class:</simpara>
<programlisting language="java" linenumbering="unnumbered">public Movie[] getMovies() {
    return target
        .request()
        .get(Movie[].class);
}</programlisting>

<simpara>A request is prepared by calling the request method. HTTP GET method is
invoked by calling get method. The response type is specified in the
last method call and so return value is of the type <literal>Movie[]</literal>.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;Web Pages&#8217;, select &#8216;New&#8217;, &#8216;Folder&#8217;, specify the
name as &#8216;client&#8217;, and click on &#8216;Finish&#8217;.</simpara>
<simpara>Right-click on the newly created folder, select &#8216;New&#8217;, &#8216;Other&#8217;,
&#8216;JavaServer Faces&#8217;, &#8216;Facelets Template Client&#8217;, and click on &#8216;Next &gt;&#8217;.</simpara>
<simpara>Give the File Name as &#8216;movies&#8217;. Click on &#8216;Browse&#8217; next to &#8216;Template:&#8217;,
expand &#8216;Web Pages&#8217;, &#8216;WEB-INF&#8217;, select &#8216;template.xhtml&#8217;, and click on
&#8216;Select File&#8217;. Click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections where name attribute value is
&#8216;top&#8217; and &#8216;left&#8217;. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;h:form prependId="false"&gt;
            &lt;h:selectOneRadio value="#{movieBackingBean.movieId}" layout="pageDirection"&gt;
                &lt;c:forEach items="#{movieClientBean.movies}" var="m"&gt;
                    &lt;f:selectItem itemValue="#{m.id}" itemLabel="#{m.name}"/&gt;
                &lt;/c:forEach&gt;
            &lt;/h:selectOneRadio&gt;
            &lt;h:commandButton value="Details" action="movie" /&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>This code fragment invokes <literal>getMovies</literal> method from <literal>MovieClientBean</literal>,
iterates over the response in a for loop, and display the name of each
movie with a radio button. The selected radio button value is bound to
the EL expression <literal>#{movieBackingBean.movieId}</literal>.</simpara>
<simpara>The code also has a button with &#8216;Details&#8217; label and looks for
&#8216;movie.xhtml&#8217; in the same directory. We will create this file later.</simpara>
<simpara>Click on the yellow bulb in the left bar to resolve the namespace
prefix-to-URI resolution. This needs to be completed for <literal>h:</literal>, <literal>c:</literal>,
and <literal>f:</literal> prefixes.</simpara>
<figure>
<title>Namespace prefix imports</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/6.6-imports.png"/>
    </imageobject>
    <textobject><phrase>6.6 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Right-click on &#8216;org.javaee7.movieplex7.client&#8217; package, select
&#8216;New&#8217;, &#8216;Java Class&#8217;, specify the value as &#8216;MovieBackingBean&#8217; and click
on &#8216;Finish&#8217;.</simpara>
<simpara>Add the following field:</simpara>
<programlisting language="java" linenumbering="unnumbered">int movieId;</programlisting>

<simpara>Add getters/setters by right-clicking on the editor pane and selecting
&#8216;Insert Code&#8217; (<keycombo><keycap>Ctrl</keycap><keycap>I</keycap></keycombo> shortcut on OSX). Select the field and click on
&#8216;Generate&#8217;.</simpara>
<simpara>Add <literal>@Named</literal> and <literal>@SessionScoped</literal> class-level annotations and implements
<literal>Serializable</literal>.</simpara>
<simpara>Resolve the imports.</simpara>
<warning>
<simpara>Make sure to import <literal>javax.enterprise.context.SessionScoped</literal>.</simpara>
</warning>

</listitem>
<listitem>
<simpara>In &#8216;template.xhtml&#8217;, add the following code along with other &lt;outputLink&gt;s:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;p/&gt;&lt;h:outputLink
        value="${facesContext.externalContext.requestContextPath}/faces/client/movies.xhtml"&gt;
        Movies
    &lt;/h:outputLink&gt;</programlisting>

<simpara>Running the project (<keycombo><keycap>Fn</keycap><keycap>F6</keycap></keycombo> shortcut on OSX) and clicking on &#8216;Movies&#8217;
in the left navigation bar shows the output as shown.</simpara>
<figure>
<title>List of movies output page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/6.8-output.png"/>
    </imageobject>
    <textobject><phrase>6.8 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The list of all the movies with a radio button next to them is
displayed.</simpara>
</listitem>
<listitem>
<simpara>In <literal>MovieClientBean</literal>, inject <literal>MovieBackingBean</literal> to read the value
of selected movie from the page. Add the following code:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Inject
MovieBackingBean bean;</programlisting>

</listitem>
<listitem>
<simpara>In <literal>MovieClientBean</literal>, add the following method:</simpara>
<programlisting language="java" linenumbering="unnumbered">public Movie getMovie() {
    Movie m = target
        .path("{movie}")
        .resolveTemplate("movie", bean.getMovieId())
        .request()
        .get(Movie.class);
    return m;
}</programlisting>

<simpara>This code reuses the <literal>Client</literal> and <literal>WebTarget</literal> instances created in
<literal>@PostConstruct</literal>. It also adds a variable part to the URI of the REST
endpoint, defined using <literal>{movie}</literal>, and binds it to a concrete value using
<literal>resolveTemplate</literal> method. The return type is specified as a parameter to
the get method.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;client&#8217; folder, select &#8216;New&#8217;, &#8216;Facelets Template
Client&#8217;, give the File Name as &#8216;movie&#8217;. Click on &#8216;Browse&#8217; next to
&#8216;Template:&#8217;, expand &#8216;Web Pages&#8217;, &#8216;WEB-INF&#8217;, select &#8216;template.xhtml&#8217;, and
click on &#8216;Select File&#8217;. Click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections where name attribute value is
&#8216;top&#8217; and &#8216;left&#8217;. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:define name="content"&gt;
    &lt;h1&gt;Movie Details&lt;/h1&gt;
    &lt;h:form&gt;
        &lt;table cellpadding="5" cellspacing="5"&gt;
            &lt;tr&gt;
                &lt;th align="left"&gt;Movie Id:&lt;/th&gt;
                &lt;td&gt;#{movieClientBean.movie.id}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th align="left"&gt;Movie Name:&lt;/th&gt;
                &lt;td&gt;#{movieClientBean.movie.name}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th align="left"&gt;Movie Actors:&lt;/th&gt;
                &lt;td&gt;#{movieClientBean.movie.actors}&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;h:commandButton value="Back" action="movies" /&gt;
    &lt;/h:form&gt;
&lt;/ui:define&gt;</programlisting>

<simpara>Click on the yellow-bulb to resolve the namespace prefix-URI mapping for
<literal>h:</literal>.</simpara>
<simpara>The output values are displayed by calling the <literal>getMovie</literal> method and
using the <literal>id</literal>, <literal>name</literal>, and <literal>actors</literal> property values.</simpara>
</listitem>
<listitem>
<simpara>Run the project, select &#8216;Movies&#8217; in the left navigation bar,
select a radio button next to any movie, and click on details to see the
output as shown.</simpara>
<figure>
<title>Movie Details page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/6.12-output.png"/>
    </imageobject>
    <textobject><phrase>6.12 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on the &#8216;Back&#8217; button to select another movie.</simpara>
</listitem>
<listitem>
<simpara>Add the ability to delete a movie. In &#8216;movies.xhtml&#8217;, add the
following code with other &lt;commandButton&gt;.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h:commandButton
    value="Delete"
    action="movies"
    actionListener="#{movieClientBean.deleteMovie()}"/&gt;</programlisting>

<simpara>This button displays a label &#8216;Delete&#8217;, invokes the method deleteMovie
from &#8216;MovieClientBean&#8217;, and then renders &#8216;movies.xhtml&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Add the following code to &#8216;MovieClientBean&#8217;:</simpara>
<programlisting language="java" linenumbering="unnumbered">public void deleteMovie() {
    target
        .path("{movieId}")
        .resolveTemplate("movieId", bean.getMovieId())
        .request()
        .delete();
}</programlisting>

<simpara>This code again reuses the <literal>Client</literal> and <literal>WebTarget</literal> instances created in
<literal>@PostConstruct</literal>. It also adds a variable part to the URI of the REST
endpoint, defined using <literal>{movieId}</literal>, and binds it to a concrete value
using <literal>resolveTemplate</literal> method. The URI of the resource to be deleted is
prepared and then delete method is called to delete the resource.</simpara>
<simpara>Make sure to resolve the imports.</simpara>
<simpara>Running the project shows the output shown.</simpara>
<figure>
<title>Delete button</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/6.14-output.png"/>
    </imageobject>
    <textobject><phrase>6.14 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Select a movie and click on Delete button. This deletes the movie from
the database and refreshes list on the page. Note that a redeploy of the
project will delete all the movies anyway and add them all back.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="json">
<title>Add Movie (Java API for JSON Processing)</title>
<simpara><emphasis role="strong">Purpose</emphasis>: Add a new movie. In doing so several new features of the Java
API for JSON Processing 1.0 will be introduced and demonstrated by using
them in the application.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 30-45 mins</simpara>
<simpara>Java API for JSON Processing provides a standard API to parse and
generate JSON so that the applications can rely upon a portable API.
This API will provide:</simpara>
<itemizedlist>
<listitem>
<simpara>Produce/Consume JSON in a streaming fashion (similar to StAX API for XML)</simpara>
</listitem>
<listitem>
<simpara>Build a Java Object Model for JSON (similar to DOM API for XML)</simpara>
</listitem>
</itemizedlist>

<simpara>This section will define a JAX-RS Entity Providers that will allow
reading and writing JSON for a Movie POJO. The JAX-RS Client API will
request this JSON representation.</simpara>
<simpara>JAX-RS Entity Providers supply mapping services between on-the-wire
representations and their associated Java types.  Several standard Java
types such as <literal>String</literal>, <literal>byte[]</literal>, <literal>javax.xml.bind.JAXBElement</literal>,
<literal>java.io.InputStream</literal>, <literal>java.io.File</literal>, and others have a pre-defined mapping
and is required by the specification. Applications may provide their own
mapping to custom types using <literal>MessageBodyReader</literal> and <literal>MessageBodyWriter</literal>
interfaces.</simpara>
<simpara>This section will provide the ability to add a new movie to the
application. Typically, this functionality will be available after
proper authentication and authorization.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Right-click on Source Packages, select &#8216;New&#8217;, &#8216;Java Class&#8217;,
specify the name as &#8216;MovieReader&#8217;, package as &#8216;org.javaee7.movieplex7.json&#8217;
and click on &#8216;Finish&#8217;. Add the following class-level annotations:</simpara>
</listitem>
<listitem>
<simpara>Right-click on newly created package, select &#8216;New&#8217;, &#8216;Java Class&#8217;,
specify the name as &#8216;MovieReader&#8217;, and click on &#8216;Finish&#8217;. Add the
following class-level annotations:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Provider
@Consumes(MediaType.APPLICATION_JSON)</programlisting>

<simpara><literal>@Provider</literal> allows this implementation to be discovered by the JAX-RS
runtime during the provider scanning phase. <literal>@Consumes</literal> indicates that
this implementation will consume a JSON representation of the resource.</simpara>
<simpara>Make sure to resolve imports from the appropriate package as shown.</simpara>
<figure>
<title>Provider import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.2-imports.png"/>
    </imageobject>
    <textobject><phrase>7.2 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Make the class implements <literal>MessageBodyReader&lt;Movie&gt;</literal>.</simpara>
<figure>
<title>Implement abstract methods for MessageBodyReader</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.3-implements.png"/>
    </imageobject>
    <textobject><phrase>7.3 implements</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on the hint (shown as yellow bulb) on the class definition and
select &#8216;Implement all abstract methods&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Change implementation of the <literal>isReadable</literal> method as:</simpara>
<programlisting language="java" linenumbering="unnumbered">return Movie.class.isAssignableFrom(type);</programlisting>

<simpara>This method ascertains if the <literal>MessageBodyReader</literal> can produce an instance
of a particular type.</simpara>
</listitem>
<listitem>
<simpara>Replace the <literal>readFrom</literal> method with:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Override
public Movie readFrom(
    Class&lt;Movie&gt; type,
    Type type1,
    Annotation[] antns,
    MediaType mt,
    MultivaluedMap&lt;String, String&gt; mm,
    InputStream in)
      throws IOException, WebApplicationException {

    Movie movie = new Movie();
    JsonParser parser = Json.createParser(in);
    while (parser.hasNext()) {
        switch (parser.next()) {
            case KEY_NAME:
                String key = parser.getString();
                parser.next();
                switch (key) {
                    case "id":
                        movie.setId(parser.getInt());
                        break;
                    case "name":
                        movie.setName(parser.getString());
                        break;
                    case "actors":
                        movie.setActors(parser.getString());
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }
    return movie;
}</programlisting>

<simpara>This code reads a type from the input stream in. <literal>JsonParser</literal>, a streaming
parser, is created from the input stream. Key values are read from the
parser and a <literal>Movie</literal> instance is populated and returned.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;org.javaee7.movieplex7.json&#8217; package, select &#8216;New&#8217;, &#8216;Java Class&#8217;,
specify the name as &#8216;MovieWriter&#8217;, and click on &#8216;Finish&#8217;. Add the
following class-level annotations:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Provider
@Produces(MediaType.APPLICATION_JSON)</programlisting>

<simpara><literal>@Provider</literal> allows this implementation to be discovered by the JAX-RS
runtime during the provider scanning phase. <literal>@Produces</literal> indicates that
this implementation will produce a JSON representation of the resource.</simpara>
<simpara>Resolve the imports as shown.</simpara>
<figure>
<title>Provider import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.6-imports.png"/>
    </imageobject>
    <textobject><phrase>7.6 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Make this class implement <literal>MessageBodyWriter</literal> interface by adding the following code:</simpara>
<programlisting language="java" linenumbering="unnumbered">implements MessageBodyWriter&lt;Movie&gt;</programlisting>

<simpara>Resolve the imports.</simpara>
<simpara>The IDE provide a hint to implement abstract methods as:</simpara>
<figure>
<title>Implement abstract methods for MessageBodyWriter</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.7-implements.png"/>
    </imageobject>
    <textobject><phrase>7.7 implements</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on the hint (show as yellow bulb) on the class definition and
select &#8216;Implement all abstract methods&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Change implementation of the <literal>isWritable</literal> method to:</simpara>
<programlisting language="java" linenumbering="unnumbered">return Movie.class.isAssignableFrom(type);</programlisting>

<simpara>This method ascertains if the <literal>MessageBodyWriter</literal> supports a particular
type.</simpara>
</listitem>
<listitem>
<simpara>Add implementation of the <literal>getSize</literal> method as:</simpara>
<programlisting language="java" linenumbering="unnumbered">return -1;</programlisting>

<simpara>Originally, this method was called to ascertain the length in bytes of
the serialized form of <literal>t</literal>. In JAX-RS 2.0, this method is deprecated and
the value returned by the method is ignored by a JAX-RS runtime. All
<literal>MessageBodyWriter</literal> implementations are advised to return -1.</simpara>
</listitem>
<listitem>
<simpara>Change implementation of the <literal>writeTo</literal> method to:</simpara>
<programlisting language="java" linenumbering="unnumbered">JsonGenerator gen = Json.createGenerator(entityStream);
gen.writeStartObject()
    .write("id", t.getId())
    .write("name", t.getName())
    .write("actors", t.getActors())
    .writeEnd();
    gen.flush();</programlisting>

<simpara>This method writes a type to an HTTP message. <literal>JsonGenerator</literal> writes JSON
data to an output stream in a streaming way. Overloaded write methods
are used to write different data types to the stream.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>In &#8216;Web Pages&#8217;, right-click on &#8216;client&#8217; folder, select &#8216;New&#8217;,
&#8216;Facelets Template Client&#8217;. Give the File Name as &#8216;addmovie&#8217;.
Click on &#8216;Browse&#8217; next to &#8216;Template:&#8217;, expand &#8216;Web Pages&#8217;,
&#8216;WEB-INF&#8217;, select &#8216;template.xhtml&#8217;, and click on &#8216;Select File&#8217;.
Click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections where name attribute value is
&#8216;top&#8217; and &#8216;left&#8217;. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
    &lt;h1&gt;Add a New Movie&lt;/h1&gt;
    &lt;h:form&gt;
        &lt;table cellpadding="5" cellspacing="5"&gt;
            &lt;tr&gt;
                &lt;th align="left"&gt;Movie Id:&lt;/th&gt;
                &lt;td&gt;&lt;h:inputText value="#{movieBackingBean.movieId}"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th align="left"&gt;Movie Name:&lt;/th&gt;
                &lt;td&gt;&lt;h:inputText value="#{movieBackingBean.movieName}"/&gt; &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th align="left"&gt;Movie Actors:&lt;/th&gt;
                &lt;td&gt;&lt;h:inputText value="#{movieBackingBean.actors}"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;h:commandButton
            value="Add"
            action="movies"
            actionListener="#{movieClientBean.addMovie()}"/&gt;
    &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>This code creates a form to accept input of <literal>id</literal>, <literal>name</literal>, and <literal>actors</literal> of a
movie. These values are bound to fields in <literal>MovieBackingBean</literal>. The click
of command button invokes the addMovie method from <literal>MovieClientBean</literal> and
then renders &#8216;movies.xhtml&#8217;.</simpara>
<simpara>Click on the hint (show as yellow bulb) to resolve the namespace
prefix/URI mapping as shown.</simpara>
<figure>
<title>Namespace prefix mapping imports</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.11-imports.png"/>
    </imageobject>
    <textobject><phrase>7.11 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Add <literal>movieName</literal> and <literal>actors</literal> field to <literal>MovieBackingBean</literal> as:</simpara>
<programlisting language="java" linenumbering="unnumbered">String movieName;
String actors;</programlisting>

<simpara>Generate getters and setters by clicking on the menu item &#8216;Source&#8217; and
then &#8216;Insert Code&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Add the following code to &#8216;movies.xhtml&#8217;</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h:commandButton value="New Movie" action="addmovie" /&gt;</programlisting>

<simpara>along with rest of the &lt;commandButton&gt;s.</simpara>
</listitem>
<listitem>
<simpara>Add the following method in <literal>MovieClientBean</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">public void addMovie() {
    Movie m = new Movie();
    m.setId(bean.getMovieId());
    m.setName(bean.getMovieName());
    m.setActors(bean.getActors());
    target
        .register(MovieWriter.class)
        .request()
        .post(Entity.entity(m, MediaType.APPLICATION_JSON));
}</programlisting>

<simpara>This method creates a new <literal>Movie</literal> instance, populates it with the values
from the backing bean, and POSTs the bean to the REST endpoint. The
register method registers a MovieWriter that provides conversion from
the POJO to JSON. Media type of <literal>application/json</literal> is specified using <literal>MediaType.APPLICATION_JSON</literal>.</simpara>
<simpara>Resolve the imports as shown</simpara>
<figure>
<title>Entity import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.14-imports.png"/>
    </imageobject>
    <textobject><phrase>7.14 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Run the project to see the updated main page as:</simpara>
<figure>
<title>New Movie button</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.15-output.png"/>
    </imageobject>
    <textobject><phrase>7.15 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>A new movie can be added by clicking on &#8216;New Movie&#8217; button.</simpara>
</listitem>
<listitem>
<simpara>Enter the details as shown:</simpara>
<figure>
<title>Add a New Movie page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.16-output.png"/>
    </imageobject>
    <textobject><phrase>7.16 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on &#8216;Add&#8217; button. The &#8216;Movie Id&#8217; value has to be greater than 20
otherwise the primary key constraint will be violated. The table
definition may be updated to generate the primary key based upon a
sequence; however this is not done in the application.</simpara>
<simpara>The updated page looks like as shown</simpara>
<figure>
<title>Newly added movie</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/7.16-output2.png"/>
    </imageobject>
    <textobject><phrase>7.16 output2</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Note that the newly added movie is now displayed.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="jms">
<title>Movie Points (Java Message Service)</title>
<simpara><emphasis role="strong">Purpose</emphasis>: Customers accrue points for watching a movie.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 30-45 mins</simpara>
<simpara>Java Message Service 2.0 allows sending and receiving messages between
distributed systems. JMS 2 introduced several improvements over the
previous version such as:</simpara>
<itemizedlist>
<listitem>
<simpara>New <literal>JMSContext</literal> interface</simpara>
</listitem>
<listitem>
<simpara>AutoCloseable <literal>JMSContext</literal>, <literal>Connection</literal>, and <literal>Session</literal></simpara>
</listitem>
<listitem>
<simpara>Use of runtime exceptions</simpara>
</listitem>
<listitem>
<simpara>Method chaining on <literal>JMSProducer</literal></simpara>
</listitem>
<listitem>
<simpara>Simplified message sending</simpara>
</listitem>
</itemizedlist>

<simpara>This section will provide a page to simulate submission of movie points
accrued by a customer. These points are submitted to a JMS queue that is
then read synchronously by another bean. JMS queue for further
processing, possibly storing in the database using JPA.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Right-click on Source Packages, select &#8216;New&#8217;, &#8216;Java Class&#8217;,
specify the name as &#8216;SendPointsBean&#8217;, package as &#8216;org.javaee7.movieplex7.points&#8217;,
and click on &#8216;Finish&#8217;.</simpara>
<simpara>Add the following class-level annotations:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Named
@RequestScoped</programlisting>

<simpara>This makes the bean to be EL-injectable and automatically activated and
passivated with the request.</simpara>
<simpara>Resolve the imports.</simpara>
<figure>
<title>RequestScoped import</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.2-imports.png"/>
    </imageobject>
    <textobject><phrase>8.2 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>A message to a JMS Queue is sent after the customer has bought the
tickets. Another bean will then retrieve this message and update the
points for that customer. This allows the two systems, one generating
the data about tickets purchased and the other about crediting the
account with the points, completely decoupled.</simpara>
<simpara>This lab will mimic the sending and consuming of a message by an
explicit call to the bean from a JSF page.</simpara>
<simpara>Add the following field to the class:</simpara>
<programlisting language="java" linenumbering="unnumbered">@NotNull
@Pattern(regexp = "^\\d{2},\\d{2}",
         message = "Message format must be 2 digits, comma, 2 digits, e.g.12,12")
private String message;</programlisting>

<simpara>This field contains the message sent to the queue. This field’s value is
bound to an inputText in a JSF page (created later). Constraints have
been specified on this bean that enable validation of data on form
submit. It requires the data to consists of two numerical digits, followed
by a comma, and then two more numerical digits. If the message does not
meet the validation criteria then the error message to be displayed is
specified using message attribute.</simpara>
<simpara>This could be thought as conveying the customer identifier and the
points accrued by that customer.</simpara>
<simpara>Generate getter/setters for this field. Right-click in the editor pane,
select &#8216;Insert Code&#8217; (<keycombo><keycap>Ctrl</keycap><keycap>I</keycap></keycombo> shortcut on OSX), select &#8216;Getter and
Setter&#8217;, select the field, and click on &#8216;Generate&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Add the following code to the class:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Inject
JMSContext context;

@Resource(lookup = "java:global/jms/pointsQueue")
Queue pointsQueue;

public void sendMessage() {
    System.out.println("Sending message: " + message);
    context.createProducer().send(pointsQueue, message);
}</programlisting>

<simpara>The Java EE Platform requires a pre-configured JMS connection factory
under the JNDI name <literal>java:comp/DefaultJMSConnectionFactory</literal>. If no
connection factory is specified then the pre-configured connection
factory is used. In a Java EE environment, where CDI is enabled by
default anyway, a container-managed <literal>JMSContext</literal> can be injected as:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Inject
JMSContext context;</programlisting>

<simpara>This code uses the default factory to inject an instance of
container-managed <literal>JMSContext</literal>.</simpara>
<simpara><literal>JMSContext</literal> is a new interface introduced in JMS 2. This combines in a
single object the functionality of two separate objects from the JMS 1.1
API: a <literal>Connection</literal> and a <literal>Session</literal>.</simpara>
<simpara>When an application needs to send messages it use the <literal>createProducer</literal>
method to create a <literal>JMSProducer</literal> that provides methods to configure and
send messages. Messages may be sent either synchronously or
asynchronously.</simpara>
<simpara>When an application needs to receive messages it uses one of several
<literal>createConsumer</literal> or <literal>createDurableConsumer</literal> methods to create a <literal>JMSConsumer</literal>.
A <literal>JMSConsumer</literal> provides methods to receive messages either synchronously
or asynchronously.</simpara>
<simpara>All messages are then sent to a <literal>Queue</literal> instance (created later)
identified by <literal>java:global/jms/pointsQueue</literal> JNDI name. The actual message
is obtained from the value entered in the JSF page and bound to the
message field.</simpara>
<simpara>Resolve the imports.</simpara>
<warning>
<simpara>Make sure <literal>Queue</literal> class is imported from <literal>javax.jms.Queue</literal> instead of the
default <literal>java.util.Queue</literal>.</simpara>
</warning>

<simpara>Click on &#8216;OK&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;org.javaee7.movieplex7.points&#8217; package, select
&#8216;New&#8217;, &#8216;Java Class&#8217;, specify the name as &#8216;ReceivePointsBean&#8217;.</simpara>
<simpara>Add the following class-level annotations:</simpara>
<programlisting language="java" linenumbering="unnumbered">@JMSDestinationDefinition(name = "java:global/jms/pointsQueue",
interfaceName = "javax.jms.Queue")
@Named
@RequestScoped</programlisting>

<simpara>This allows the bean to refered from an EL expression. It also activates
and passivates the bean with the request.</simpara>
<simpara><literal>JMSDestinationDefinition</literal> is a new annotation introduced in JMS 2. It is
used by the application to provision the required resources and allow an
application to be deployed into a Java EE environment with minimal
administrative configuration. This code will create Queue with the JNDI
name <literal>java:global/jms/pointsQueue</literal>.</simpara>
</listitem>
<listitem>
<simpara>Add the following code to the class:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Inject
JMSContext context;

@Resource(lookup="java:global/jms/pointsQueue")
Queue pointsQueue;

public String receiveMessage() {
    try (JMSConsumer consumer = context.createConsumer(pointsQueue)) {
        String message = consumer.receiveBody(String.class);
        System.out.println("Received message: " + message);
        return message;
    }
}</programlisting>

<simpara>This code creates <literal>JMSConsumer</literal> in a try-with-resources block
which is then used to synchronously receive a message. Note that <literal>JMSConsumer</literal>
is created as an auto-managed resource and so is closed automatically after
receiving each message. Alternatively asynchronous message delivery can also be setup
using Message Driven Beans. However that is not covered in this lab.</simpara>
</listitem>
<listitem>
<simpara>Add the following method to the class:</simpara>
<programlisting language="java" linenumbering="unnumbered">public int getQueueSize() {
    int count = 0;
    try {
        QueueBrowser browser = context.createBrowser(pointsQueue);
        Enumeration elems = browser.getEnumeration();
        while (elems.hasMoreElements()) {
            elems.nextElement();
            count++;
        }
    } catch (JMSException ex) {
        ex.printStackTrace();
    }
    return count;
}</programlisting>

<simpara>This code creates a <literal>QueueBrowser</literal> to look at the messages on a queue
without removing them. It calculates and returns the total number of
messages in the queue.</simpara>
<simpara>Make sure to resolve the import from <literal>javax.jms.Queue</literal>, take all other
defaults.</simpara>
</listitem>
<listitem>
<simpara>Right-click on &#8216;Web Pages&#8217;, select &#8216;New&#8217;, &#8216;Folder&#8217;, specify the
name as &#8216;points&#8217;, and click on &#8216;Finish&#8217;.</simpara>
<simpara>In &#8216;Web Pages&#8217;, right-click on newly created folder, select &#8216;Facelets
Template Client&#8217;, give the File Name as &#8216;points&#8217;. Click on &#8216;Browse&#8217;
next to &#8216;Template:&#8217;, expand &#8216;Web Pages&#8217;, &#8216;WEB-INF&#8217;, select
&#8216;template.xhtml&#8217;, and click on &#8216;Select File&#8217;. Click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections where name attribute value is
&#8216;top&#8217; and &#8216;left&#8217;. These sections are inherited from the template.</simpara>
<simpara>Replace the <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;h1&gt;Points&lt;/h1&gt;
        &lt;h:form&gt;
        Queue size:
            &lt;h:outputText value="#{receivePointsBean.queueSize}"/&gt;&lt;p/&gt;
            &lt;h:inputText value="#{sendPointsBean.message}"/&gt;
            &lt;h:commandButton
                value="Send Message"
                action="points"
                actionListener="#{sendPointsBean.sendMessage()}"/&gt;
        &lt;/h:form&gt;
        &lt;h:form&gt;
            &lt;h:commandButton
                value="Receive Message"
                action="points"
                actionListener="#{receivePointsBean.receiveMessage()}"/&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>Click on the yellow bulb to resolve namespace prefix/URI mapping for <literal>h:</literal>
prefix.</simpara>
<simpara>This page displays the number of messages in the current queue. It
provides a text box for entering the message that can be sent to the
queue. The first command button invokes <literal>sendMessage</literal> method from
<literal>SendPointsBean</literal> and refreshes the page. Updated queue count, incremented
by 1 in this case, is displayed. The second command button invokes
<literal>receiveMessage</literal> method from <literal>ReceivePointsBean</literal> and refreshes the page. The
queue count is updated again, decremented by 1 in this case.</simpara>
<simpara>If the message does not meet the validation criteria then the error
message is displayed on the screen.</simpara>
</listitem>
<listitem>
<simpara>Add the following code in &#8216;template.xhtml&#8217; along with other
&lt;outputLink&gt;s:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;p/&gt;&lt;h:outputLink
        value="${facesContext.externalContext.requestContextPath}/faces/points/points.xhtml"&gt;
        Points
    &lt;/h:outputLink&gt;</programlisting>

</listitem>
<listitem>
<simpara>Run the project. The update page looks like as shown:</simpara>
<figure>
<title>Points link on main page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output.png"/>
    </imageobject>
    <textobject><phrase>8.10 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on &#8216;Points&#8217; to see the output as:</simpara>
<figure>
<title>Points output page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output2.png"/>
    </imageobject>
    <textobject><phrase>8.10 output2</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The output shows that the queue has 0 messages. Enter a message &#8216;1212&#8217;
in the text box and click on &#8216;Send Message&#8217; to see the output as shown.</simpara>
<figure>
<title>Validation message on Points page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output3.png"/>
    </imageobject>
    <textobject><phrase>8.10 output3</phrase></textobject>
  </mediaobject>
</figure>

<simpara>This message is not meeting the validation criteria and so the error
message is displayed.</simpara>
<simpara>Enter a message as &#8216;12,12&#8217; in the text box and click on &#8216;Send Message&#8217;
button to see the output as:</simpara>
<figure>
<title>Correct input for Points page - Send Message (queue size=1)</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output4.png"/>
    </imageobject>
    <textobject><phrase>8.10 output4</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The updated count now shows that there is 1 message in the queue. Click
on &#8216;Receive Message&#8217; button to see output as:</simpara>
<figure>
<title>Correct input for Points page - Receive Message (queue size=0)</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output5.png"/>
    </imageobject>
    <textobject><phrase>8.10 output5</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The updated count now shows that the message has been consumed and the
queue has 0 messages.</simpara>
<simpara>Click on &#8216;Send Message&#8217; 4 times to see the output as:</simpara>
<figure>
<title>Correct input for Points page - Send Message (queue size=4)</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output6.png"/>
    </imageobject>
    <textobject><phrase>8.10 output6</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The updated count now shows that the queue has 4 messages. Click on
&#8216;Receive Message&#8217; 2 times to see the output as:</simpara>
<figure>
<title>Correct input for Points page - Receive Message (queue size=2)</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/8.10-output7.png"/>
    </imageobject>
    <textobject><phrase>8.10 output7</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The count is once again updated to reflect the 2 consumed and 2
remaining messages in the queue.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="jsf">
<title>Show Booking (JavaServer Faces)</title>
<simpara><emphasis role="strong">Purpose</emphasis>: Build pages that allow a user to book a particular movie show
in a theater. In doing so a new feature of JavaServer Faces 2.2 will be
introduced and demonstrated by using in the application.</simpara>
<simpara><emphasis role="strong">Estimated Time</emphasis>: 30-45 mins</simpara>
<simpara>JavaServer Faces 2.2 introduces a new feature called <emphasis>Faces Flow</emphasis> that
provides an encapsulation of related views/pages with application
defined entry and exit points. Faces Flow borrows core concepts from ADF
TaskFlow, Spring Web Flow, and Apache MyFaces CODI.</simpara>
<simpara>It introduces <literal>@FlowScoped</literal> CDI annotation for flow-local storage and
<literal>@FlowDefinition</literal> to define the flow using CDI producer methods. There are
clearly defined entry and exit points with well-defined parameters. This
allows the flow to be packaged together as a JAR or ZIP file and be
reused. The application thus becomes a collection of flows and non-flow
pages. Usually the objects in a flow are designed to allow the user to
accomplish a task that requires input over a number of different views.</simpara>
<simpara>This application will build a flow that allows the user to make a movie
reservation. The flow will contain four pages:</simpara>
<itemizedlist>
<listitem>
<simpara>Display the list of movies</simpara>
</listitem>
<listitem>
<simpara>Display the list of available show timings</simpara>
</listitem>
<listitem>
<simpara>Confirm the choices</simpara>
</listitem>
<listitem>
<simpara>Make the reservation and show the ticket</simpara>
</listitem>
</itemizedlist>

<simpara>Lets build the application.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Items in a flow are logically related to each other and so it is
required to keep them together in a directory. In NetBeans, right-click
on the &#8216;Web Pages&#8217;, select &#8216;New&#8217;, &#8216;Folder&#8217;, specify the folder name
&#8216;booking&#8217;, and click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>Right-click on the newly created folder, select &#8216;New&#8217;, &#8216;Facelets
Template Client&#8217;, give the File Name as &#8216;booking&#8217;. Click on &#8216;Browse&#8217;
next to &#8216;Template:&#8217;, expand &#8216;Web Pages&#8217;, &#8216;WEB-INF&#8217;, select
&#8216;template.xhtml&#8217;, and click on &#8216;Select File&#8217;. Click on &#8216;Finish&#8217;.</simpara>
</listitem>
<listitem>
<simpara>&#8216;booking.xhtml&#8217; is the entry point to the flow (more on this later).</simpara>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections with &#8216;top&#8217; and &#8216;left&#8217; name
attributes. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;h2&gt;Pick a movie&lt;/h2&gt;
        &lt;h:form prependId="false"&gt;
            &lt;h:selectOneRadio
                value="#{booking.movieId}"
                layout="pageDirection"
                required="true"&gt;
                &lt;f:selectItems
                    value="#{movieFacadeREST.all}"
                    var="m"
                    itemValue="#{m.id}"
                    itemLabel="#{m.name}"/&gt;
            &lt;/h:selectOneRadio&gt;
            &lt;h:commandButton id="shows" value="Pick a time" action="showtimes" /&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>The code builds an HTML form that displays the list of movies as radio
button choices. The chosen movie is bound to <literal>#{booking.movieId}</literal> which
will be defined as a flow-scoped bean. The value of action attribute on
commandButton refers to the next view in the flow, i.e.
&#8216;showtimes.xhtml&#8217; in the same directory in our case.</simpara>
<simpara>Click on the yellow bulb as shown and click on the suggestion to
add namespace prefix/URI mapping for <literal>h:</literal>. Repeat the same for <literal>f:</literal> prefix as well.</simpara>
<figure>
<title>Namespace prefix mapping imports</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/9.3-imports.png"/>
    </imageobject>
    <textobject><phrase>9.3 imports</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Right-click on &#8216;Source Packages&#8217;, select &#8216;New&#8217;, &#8216;Java Class&#8217;.
Specify the class name as &#8216;Booking&#8217; and the package name as
&#8216;org.javaee7.movieplex7.booking&#8217;.</simpara>
<simpara>Add <literal>@Named</literal> class-level annotation to make the class EL-injectable.</simpara>
<simpara>Add <literal>@FlowScoped("booking")</literal> to define the scope of bean as the flow. The bean is automatically activated and passivated as the flow is entered or exited.</simpara>
<simpara>Add <literal>implements Serializable</literal> to the class as beans with <literal>@FlowScoped</literal> annotation need to be passivation capable, and thus serializable.</simpara>
<simpara>Add the following field:</simpara>
<programlisting language="java" linenumbering="unnumbered">int movieId;</programlisting>

<simpara>and generate getters/setters by going to &#8216;Source&#8217;, &#8216;Insert Code&#8217;,
selecting &#8216;Getter and Setter&#8217;, and select the field.</simpara>
<simpara>Inject <literal>EntityManager</literal> in this class by adding the following code:</simpara>
<programlisting language="java" linenumbering="unnumbered">@PersistenceContext
EntityManager em;</programlisting>

<simpara>Add the following convenience method:</simpara>
<programlisting language="java" linenumbering="unnumbered">public String getMovieName() {
    try {
        return em.createNamedQuery("Movie.findById", Movie.class)
                  .setParameter("id", movieId)
                  .getSingleResult()
                  .getName();
    } catch (NoResultException e) {
        return "";
    }
}</programlisting>

<simpara>This method will return the movie name based upon the selected movie.</simpara>
<simpara>Alternatively, movie id and name may be passed from the selected radio
button and parsed in the backing bean. This will reduce an extra trip to
the database.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Create &#8216;showtimes.xhtml&#8217; in the &#8216;booking&#8217; folder following the
steps used to create &#8216;booking.xhtml&#8217;.</simpara>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections with &#8216;top&#8217; and &#8216;left&#8217; name
attributes. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;h2&gt;Show Timings for &lt;font color="red"&gt;#{booking.movieName}&lt;/font&gt;&lt;/h2&gt;
        &lt;h:form&gt;
            &lt;h:selectOneRadio value="#{booking.startTime}" layout="pageDirection" required="true"&gt;
                &lt;c:forEach items="#{timeslotFacadeREST.all}" var="s"&gt;
                    &lt;f:selectItem itemValue="#{s.id},#{s.startTime}" itemLabel="#{s.startTime}"/&gt;
                &lt;/c:forEach&gt;
            &lt;/h:selectOneRadio&gt;
            &lt;h:commandButton value="Confirm" action="confirm" /&gt;
            &lt;h:commandButton id="back" value="Back" action="booking" immediate="true"/&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>This code builds an HTML form that displays the chosen movie name and
all the show times. <literal>#{timeslotFacadeREST.all}</literal> returns the list of all
the movies and iterates over them using a <literal>c:forEach</literal> loop. The id and
start time of the selected show are bound to <literal>#{booking.startTime}</literal>.
Command button with value &#8216;Back&#8217; allows going back to the previous page and
the other command button with value &#8216;Confirm&#8217; takes to the next view in the
flow, &#8216;confirm.xhtml&#8217; in our case.</simpara>
<simpara>Typically a user will expect the show times only for the selected movie
but all the show times are shown here. This allows us to demonstrate
going back and forth within a flow if an incorrect show time for a movie
is chosen. A different query may be written that displays only the shows
available for this movie; however this is not part of the application.</simpara>
<simpara>Right-click on the yellow bulb to fix namespace prefix/URI mapping for
<literal>h:</literal>. This needs to be repeated for <literal>c:</literal> and <literal>f:</literal> prefix as well.</simpara>
</listitem>
<listitem>
<simpara>Add the following fields to the <literal>Booking</literal> class:</simpara>
<programlisting language="java" linenumbering="unnumbered">String startTime;
int startTimeId;</programlisting>

<simpara>And the following methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">public String getStartTime() {
    return startTime;
}

public void setStartTime(String startTime) {
    StringTokenizer tokens = new StringTokenizer(startTime, ",");
    startTimeId = Integer.parseInt(tokens.nextToken());
    this.startTime = tokens.nextToken();
}

public int getStartTimeId() {
    return startTimeId;
}</programlisting>

<simpara>These methods will parse the values received from the form. Also add the
following method:</simpara>
<programlisting language="java" linenumbering="unnumbered">public String getTheater() {
    // for a movie and show
    try {

        // Always return the first theater
        List&lt;ShowTiming&gt; list =
            em.createNamedQuery("ShowTiming.findByMovieAndTimingId",
                ShowTiming.class)
                .setParameter("movieId", movieId)
                .setParameter("timingId", startTimeId)
                .getResultList();

        if (list.isEmpty())
            return "none";

        return list
                .get(0)
                .getTheaterId()
                .getId()
                .toString();
    } catch (NoResultException e) {
        return "none";
    }
}</programlisting>

<simpara>This method will find the first theater available for the chosen movie
and show the timing.</simpara>
<simpara>Additionally a list of theaters offering that movie may be shown in a
separate page.</simpara>
<simpara>Resolve the imports.</simpara>
</listitem>
<listitem>
<simpara>Create &#8216;confirm.xhtml&#8217; page in the &#8216;booking&#8217; folder by following
the steps used to create ‘booking.xhtml’.</simpara>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections wht &#8216;top&#8217; and &#8216;left&#8217; name
attributes. These sections are inherited from the template.</simpara>
<simpara>Replace &#8216;&lt;ui:define&gt;&#8217; section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;c:choose&gt;
            &lt;c:when test="#{booking.theater == 'none'}"&gt;
                &lt;h2&gt;No theater found, choose a different time&lt;/h2&gt;
                &lt;h:form&gt;
                    Movie name: #{booking.movieName}&lt;p/&gt;
                    Starts at: #{booking.startTime}&lt;p/&gt;
                    &lt;h:commandButton id="back" value="Back" action="showtimes"/&gt;
                &lt;/h:form&gt;
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                &lt;h2&gt;Confirm ?&lt;/h2&gt;
                &lt;h:form&gt;
                    Movie name: #{booking.movieName}&lt;p/&gt;
                    Starts at: #{booking.startTime}&lt;p/&gt;
                    Theater: #{booking.theater}&lt;p/&gt;
                    &lt;h:commandButton id="next" value="Book" action="print"/&gt;
                    &lt;h:commandButton id="back" value="Back" action="showtimes"/&gt;
                &lt;/h:form&gt;
            &lt;/c:otherwise&gt;
        &lt;/c:choose&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>The code displays the selected movie, show timing, and theater if
available. The reservation can proceed if all three are available.
&#8216;print.xhtml&#8217; is the last page that shows the confirmed reservation
and is shown when &#8216;Book&#8217; commandButton is clicked.</simpara>
<simpara><literal>actionListener</literal> can be added to <literal>commandButton</literal> to invoke the business
logic for making the reservation. Additional pages may be added to take
the credit card details and email address.</simpara>
<simpara>Right-click on the yellow bulb to fix namespace prefix/URI mapping for ‘c:’.
This needs to be repeated for ‘h:’ prefix as well.</simpara>
</listitem>
<listitem>
<simpara>Create &#8216;print.xhtml&#8217; page in the &#8216;booking&#8217; folder by following the
steps used to create ‘booking.xhtml’.</simpara>
<simpara>In this file, remove <literal>&lt;ui:define&gt;</literal> sections wht &#8216;top&#8217; and &#8216;left&#8217; name
attributes. These sections are inherited from the template.</simpara>
<simpara>Replace <literal>&lt;ui:define&gt;</literal> section with &#8216;content&#8217; name such that it looks like:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;ui:composition template="../WEB-INF/template.xhtml"&gt;
    &lt;ui:define name="content"&gt;
        &lt;h2&gt;Reservation Confirmed&lt;/h2&gt;
        &lt;h:form&gt;
            Movie name: #{booking.movieName}&lt;p/&gt;
            Starts at: #{booking.startTime}&lt;p/&gt;
            Theater: #{booking.theater}&lt;p/&gt;
            &lt;h:commandButton id="home" value="home" action="goHome" /&gt;&lt;p/&gt;
        &lt;/h:form&gt;
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;</programlisting>

<simpara>This code displays the movie name, show timings, and the selected
theater.</simpara>
<simpara>Right-click on the yellow bulb to fix namespace prefix/URI mapping for ‘h:’.</simpara>
<simpara>The <literal>commandButton</literal> initiates exit from the flow. The <literal>action</literal> attribute
defines a navigation rule that will be defined in the next step.</simpara>
</listitem>
<listitem>
<simpara>&#8216;booking.xhtml&#8217;, &#8216;showtimes.xhtml&#8217;, &#8216;confirm.xhtml&#8217;, and
&#8216;print.xhtml&#8217; are all in the same directory. Now the runtime needs to be
informed that the views in this directory are to be treated as view
nodes in a flow. This can be done declaratively by adding &#8216;booking/booking-flow.xml&#8217;
or programmatically by having a class with a method with the following annotations:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Produces @FlowDefinition</programlisting>

<simpara>This lab takes the declarative approach.</simpara>
<simpara>Right-click on &#8216;Web Pages/booking&#8217; folder, select &#8216;New&#8217;, &#8216;Other&#8217;, &#8216;XML&#8217;,
&#8216;XML Document&#8217;, give the name as &#8216;booking-flow&#8217;, click on &#8216;Next&gt;&#8217;, take
the default of &#8216;Well-formed Document&#8217;, and click on &#8216;Finish&#8217;.</simpara>
<simpara>Replace the generated code with the following:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;faces-config
    version="2.2"
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
        http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"&gt;
    &lt;flow-definition id="booking"&gt;
        &lt;flow-return id="goHome"&gt;
        &lt;from-outcome&gt;/index&lt;/from-outcome&gt;
        &lt;/flow-return&gt;
    &lt;/flow-definition&gt;
&lt;/faces-config&gt;</programlisting>

<simpara>This defines the flow graph. It uses the parent element used in
a standard <literal>faces-config.xml</literal> but defines a <literal>&lt;flow-definition&gt;</literal> inside it.</simpara>
<simpara><literal>&lt;flow-return&gt;</literal> defines a return node in a flow graph. <literal>&lt;from-outcome&gt;</literal>
contains the node value, or an EL expression that defines the node, to
return to. In this case, the navigation returns to the home page.</simpara>
</listitem>
<listitem>
<simpara>Finally, invoke the flow by editing &#8216;WEB-INF/template.xhtml&#8217; and
changing:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h:commandLink action="item1"&gt;Item 1&lt;/h:commandLink&gt;</programlisting>

<simpara>to</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;h:commandLink action="booking"&gt;Book a movie&lt;/h:commandLink&gt;</programlisting>

<simpara><literal>commandLink</literal> renders an HTML anchor tag that behaves like a form submit
button. The action attribute points to the directory where all views for
the flow are stored. This directory already contains &#8216;booking-flow.xml&#8217;
which defines the flow of the pages.</simpara>
</listitem>
<listitem>
<simpara>Run the project by right clicking on the project and selecting
&#8216;Run&#8217;. The browser shows the updated output.</simpara>
<figure>
<title>Book a movie link on main page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/9.11-output.png"/>
    </imageobject>
    <textobject><phrase>9.11 output</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on &#8216;Book a movie&#8217; to see the page as shown.</simpara>
<figure>
<title>Book a movie page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/9.11-output2.png"/>
    </imageobject>
    <textobject><phrase>9.11 output2</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Select a movie, say &#8216;The Shiningr and click on `Pick a time&#8217; to see the
page output as shown.</simpara>
<figure>
<title>Show Timings page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/9.11-output3.png"/>
    </imageobject>
    <textobject><phrase>9.11 output3</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Pick a time slot, say &#8216;04:00&#8217;, click on &#8216;Confirm&#8217; to see the output as shown.</simpara>
<figure>
<title>Confirm? page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/9.11-output4.png"/>
    </imageobject>
    <textobject><phrase>9.11 output4</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on &#8216;Book&#8217; to confirm and see the output as:</simpara>
<figure>
<title>Reservation Confirmed page</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/9.11-output5.png"/>
    </imageobject>
    <textobject><phrase>9.11 output5</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Feel free to enter other combinations, go back and forth in the flow and
notice how the values in the bean are preserved.</simpara>
<simpara>Click on &#8216;home&#8217; takes to the main application page.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="_conclusion">
<title>Conclusion</title>
<simpara>This hands-on lab built a trivial 3-tier web application using Java EE 7
and demonstrated the following features of the platform:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Java EE 7 Platform</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Maven coordinates</simpara>
</listitem>
<listitem>
<simpara>Default DataSource</simpara>
</listitem>
<listitem>
<simpara>Default JMSConnectionFactory</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Java API for WebSocket 1.0</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Annotated server endpoint</simpara>
</listitem>
<listitem>
<simpara>JavaScript client</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Batch Applications for the Java Platform 1.0</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Chunk-style processing</simpara>
</listitem>
<listitem>
<simpara>Exception handling</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Java API for JSON Processing 1.0</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Streaming API for generating JSON</simpara>
</listitem>
<listitem>
<simpara>Streaming API for consuming JSON</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Java API for RESTful Web Services 2.0</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Client API</simpara>
</listitem>
<listitem>
<simpara>Custom Entity Providers</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Java Message Service 2.0</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Default ConnectionFactory</simpara>
</listitem>
<listitem>
<simpara>Injecting JMSContext</simpara>
</listitem>
<listitem>
<simpara>Synchronous message send and receive</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Contexts and Dependency Injection 1.1</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Automatic discovery of beans</simpara>
</listitem>
<listitem>
<simpara>Injection of beans</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>JavaServer Faces 2.2</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Faces Flow</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Bean Validation 1.1</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Integration with JavaServer Faces</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Java Transaction API 1.2</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>@Transactional</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Java Persistence API 2.1</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Schema generation properties</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

<simpara>Hopefully this has raised your interest enough in trying out Java EE 7 applications using
WildFly 8.</simpara>
<simpara>Send us feedback or file issues at <ulink url="http://github.com/javaee-samples/javaee7-hol">http://github.com/javaee-samples/javaee7-hol</ulink>.</simpara>
</chapter>
<chapter id="_troubleshooting">
<title>Troubleshooting</title>
<qandaset>
<qandaentry>
<question>
<simpara>How can I start/stop/restart the application server from within the IDE ?</simpara>
</question>
<answer>
<simpara>In the &#8216;Services&#8217; tab, right-click on
&#8216;WildFly 8&#8217;.
All the commands to start, stop, and restart are available from the pop-up menu.</simpara>
</answer>
</qandaentry>
<qandaentry>
<question>
<simpara>I accidentally closed the output log window. How do I bring it back ?</simpara>
</question>
<answer>
<simpara>In “Services” tab of NetBeans, expand &#8216;Servers&#8217;, choose the application server
node, and select
&#8216;View Server Log&#8217;.</simpara>
<figure>
<title>View WildFly server log in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/11-wildfly-server-log.png"/>
    </imageobject>
    <textobject><phrase>11 wildfly server log</phrase></textobject>
  </mediaobject>
</figure>

<simpara>In addition, the web-based administration console can be seen by clicking on
&#8216;View Admin Console&#8217;.</simpara>
</answer>
</qandaentry>
</qandaset>

</chapter>
<chapter id="_acknowledgements">
<title>Acknowledgements</title>
<simpara>The following Java EE community members graciously reviewed and contributed to this hands-on lab:</simpara>
<itemizedlist>
<listitem>
<simpara>Antonio Goncalves (<ulink url="http://twitter.com/agoncal">@agoncal</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Markus Eisele (<ulink url="http://twitter.com/myfear">@myfear</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Craig Sharpe (<ulink url="http://twitter.com/dapugs">@dapugs</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Marcus Vinicius Margarites (<ulink url="http://twitter.com/mvfm">@mvfm</ulink>)</simpara>
</listitem>
<listitem>
<simpara>David Delabasse (<ulink url="http://twitter.com/delabasse">@delabasse</ulink>)</simpara>
</listitem>
<listitem>
<simpara>John Clingan (<ulink url="http://twitter.com/jclingan">@jclingan</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Reza Rahman (<ulink url="http://twitter.com/reza_rahman">@reza_rahman</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Marian Muller (<ulink url="http://twitter.com/mullermarian">@mullermarian</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Jason Porter (<ulink url="http://twitter.com/lightguardjp">@lightguardjp</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Dan Allen (<ulink url="http://twitter.com/mojavelinux">@mojavelinux</ulink>)</simpara>
</listitem>
<listitem>
<simpara>Andrey Cheptsov (<ulink url="http://twitter.com/andrey_cheptsov">@andrey_cheptsov</ulink>)</simpara>
</listitem>
</itemizedlist>

<simpara>Thank you very much for providing the valuable feedback!</simpara>
</chapter>
<chapter id="_completed_solutions">
<title>Completed Solutions</title>
<simpara>The completed solution for this lab can be downloaded from <ulink url="https://github.com/javaee-samples/javaee7-hol/blob/master/solution/movieplex7-solution.zip">javaee7-hol</ulink>.</simpara>
</chapter>
<chapter id="_todo">
<title>TODO</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Add the following use cases:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Concurrency Utilities for Java EE</simpara>
</listitem>
<listitem>
<simpara>WebSocket Java Client</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Disable errors in persistence.xml</simpara>
</listitem>
<listitem>
<simpara>Add icons for Fix Imports, Format, Fix namespaces, Run the Project.</simpara>
</listitem>
<listitem>
<simpara>Change logging to use java.util.Logging.</simpara>
</listitem>
</orderedlist>

</chapter>
<chapter id="_revision_history">
<title>Revision History</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Cleaned up NetBeans instructions and some other typos from DevoxxUK (Jun 25, 2014)</simpara>
</listitem>
<listitem>
<simpara>Added IntelliJ IDEA specific instructions (Jan 22, 2014)</simpara>
</listitem>
<listitem>
<simpara>Added macros to generate WildFly and GlassFish-server specific instructions. Also enabled IntelliJ and Eclipse specific macros (Jan 10, 2014)</simpara>
</listitem>
<listitem>
<simpara>Moving the source document from Pages to AsciiDoc (Dec 3, 2013)</simpara>
</listitem>
</orderedlist>

</chapter>
<appendix id="_appendix">
<title>Appendix</title>
<section id="appendix-wildfly-netbeans">
<title>Configure WildFly 8 in NetBeans</title>
<section id="install-wildfly-plugin">
<title>Install WildFly plugin</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>In NetBeans, click on &#8216;Tools&#8217;, &#8216;Plugins&#8217;, &#8216;Available Plugins&#8217;, type &#8220;wildfly&#8221; in &#8216;Search:&#8217; box, and select the plugin by clicking on the checkbox in &#8216;Install&#8217; column.</simpara>
<figure>
<title>Available Plugins in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/16-netbeans-available-plugins-wildfly.png"/>
    </imageobject>
    <textobject><phrase>16 netbeans available plugins wildfly</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The exact plugin version and the date may be different.</simpara>
</listitem>
<listitem>
<simpara>Click the <guibutton>Install</guibutton> button, then <guibutton>Next &gt;</guibutton>, accept the license agreement by clicking on the checkbox, then click the <guibutton>Install</guibutton> button to install the plugin. Click the <guibutton>Finish</guibutton> button to restart the IDE and complete installation.</simpara>
</listitem>
</orderedlist>

</section>
<section id="_configure_wildfly_8">
<title>Configure WildFly 8</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>In NetBeans, click on &#8216;Services&#8217; tab.</simpara>
</listitem>
<listitem>
<simpara>Right-click on Servers, choose &#8216;Add Server&#8230;&#8217; in the pop-up menu.</simpara>
<figure>
<title>Add Server in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/netbeans-addserver.png"/>
    </imageobject>
    <textobject><phrase>netbeans addserver</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Select &#8216;WildFly Application Server&#8217; in the Add Server Instance wizard, set the
name to &#8216;WildFly 8&#8217; and click <guibutton>Next &gt;</guibutton>.</simpara>
<figure>
<title>Add WildFly instance to NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/16-netbeans-add-instance-wildfly.png"/>
    </imageobject>
    <textobject><phrase>16 netbeans add instance wildfly</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Click on <guibutton>Browse&#8230;</guibutton> for &#8216;Server Location&#8217; and select the directory that got created
when WildFly archive was unzipped. Click on <guibutton>Browse&#8230;</guibutton> for &#8216;Server Configuration&#8217; and
select the &#8216;standalone/configuration/standalone-full.xml&#8217; file in the unzipped WildFly
archive.</simpara>
<figure>
<title>Configure WildFly full instance in NetBeans</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/16-netbeans-wildfly-full-platform.png"/>
    </imageobject>
    <textobject><phrase>16 netbeans wildfly full platform</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Click on <guibutton>Next</guibutton> and then <guibutton>Finish</guibutton>. The &#8216;Services&#8217; should show the WildFly instance.</simpara>
<figure>
<title>WildFly instance in NetBeans Services tab</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/16-netbeans-wildfly-server.png"/>
    </imageobject>
    <textobject><phrase>16 netbeans wildfly server</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

</section>
</section>
<section id="appendix-wildfly-idea">
<title>Prepare IntelliJ IDEA for working with WildFly 8</title>
<simpara>To be able to perform the exercises discussed in this tutorial, you need the Ultimate Edition of IntelliJ IDEA. Keep that in mind when downloading IntelliJ IDEA from <ulink url="http://www.jetbrains.com/idea/download/">http://www.jetbrains.com/idea/download/</ulink>.</simpara>
<simpara>When the appropriate edition of IntelliJ IDEA is installed, you can start preparing the IDE for the exercises:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><xref linkend="specify-jdk-wildfly-idea"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="define-wildfly-idea"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="create-project-wildfly-idea"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="create-run-config-wildfly-idea"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="run-app-wildfly-idea"/></simpara>
</listitem>
</orderedlist>

<section id="specify-jdk-wildfly-idea">
<title>Specify the JDK</title>
<simpara>First of all, you should specify the JDK that you are going to use. In IntelliJ IDEA, this is done in the <emphasis role="strong">Project Structure</emphasis> dialog:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Start IntelliJ IDEA. If, as a result, a project opens, close the project (<menuchoice><guimenu>File</guimenu> <guimenuitem>Close Project</guimenuitem></menuchoice>).</simpara>
</listitem>
<listitem>
<simpara>On the Welcome screen, under <emphasis role="strong">Quick Start</emphasis>, click <emphasis role="strong">Configure</emphasis>.</simpara>
<figure>
<title>Welcome to IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-welcome-configure.png"/>
    </imageobject>
    <textobject><phrase>i13 welcome configure</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Under <emphasis role="strong">Configure</emphasis>, click <emphasis role="strong">Project Defaults</emphasis>, and then, under <emphasis role="strong">Project Defaults</emphasis>, click <emphasis role="strong">Project Structure</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the left-hand pane of the <emphasis role="strong">Project Structure</emphasis> dialog, under <emphasis role="strong">Platform Settings</emphasis>, select <emphasis role="strong">SDKs</emphasis>. Click <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-plus-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-plus-icon</phrase></textobject>
</inlinemediaobject> and select <emphasis role="strong">JDK</emphasis>.</simpara>
<figure>
<title>Add JDK in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-plus-jdk.png"/>
    </imageobject>
    <textobject><phrase>i13 plus jdk</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Select Home Directory for JDK</emphasis> dialog, select the folder in which the JDK that you are going to use is installed, and click <guibutton>OK</guibutton>.</simpara>
<figure>
<title>JDK home in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jdk-home.png"/>
    </imageobject>
    <textobject><phrase>i13 jdk home</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Project Structure</emphasis> dialog, click <guibutton>Apply</guibutton>.</simpara>
<figure>
<title>JDK defined in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jdk-defined.png"/>
    </imageobject>
    <textobject><phrase>i13 jdk defined</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Now, let&#8217;s make the JDK that we have specified the default SDK.</simpara>
</listitem>
<listitem>
<simpara>In the left-hand pane, under <emphasis role="strong">Project Settings</emphasis>, select <emphasis role="strong">Project</emphasis>. In the right-hand part of the dialog, under <emphasis role="strong">Project SDK</emphasis>, select the JDK from the list.</simpara>
<figure>
<title>Project SDK in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-project-sdk.png"/>
    </imageobject>
    <textobject><phrase>i13 project sdk</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Click <guibutton>OK</guibutton>.</simpara>
</listitem>
</orderedlist>

</section>
<section id="define-wildfly-idea">
<title>Define WildFly</title>
<simpara>Defining an application server in IntelliJ IDEA, normally, is just telling the IDE where the server is installed. The servers are defined in the <emphasis role="strong">Settings</emphasis> dialog. (On OSX, this dialog is called <emphasis role="strong">Preferences</emphasis>.)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>On the Welcome screen, to the left of <emphasis role="strong">Project Defaults</emphasis>, click <emphasis role="strong">Back</emphasis> <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-back-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-back-icon</phrase></textobject>
</inlinemediaobject>.</simpara>
</listitem>
<listitem>
<simpara>Under <emphasis role="strong">Configure</emphasis>, click <emphasis role="strong">Settings</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the left-hand pane of the <emphasis role="strong">Settings</emphasis> (<emphasis role="strong">Preferences</emphasis>) dialog, under <emphasis role="strong">IDE Settings</emphasis>, select <emphasis role="strong">Application Servers</emphasis>. On the <emphasis role="strong">Application Servers</emphasis> page, click <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-plus-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-plus-icon</phrase></textobject>
</inlinemediaobject> and select <emphasis role="strong">JBoss Server</emphasis>. (WildFly is a server from the "JBoss family".)</simpara>
<figure>
<title>Add WildFly in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-plus-jboss.png"/>
    </imageobject>
    <textobject><phrase>i13 plus jboss</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">JBoss Server</emphasis> dialog, click <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-ellipsis-button.png"/>
  </imageobject>
  <textobject><phrase>i13-ellipsis-button</phrase></textobject>
</inlinemediaobject> to the right of the <emphasis role="strong">JBoss Home</emphasis> field.</simpara>
<figure>
<title>WildFly server dialog in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-server-dialog-initial.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss server dialog initial</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">JBoss Home Directory</emphasis> dialog, select the folder in which you have the WildFly server installed, and click <guibutton>OK</guibutton>.</simpara>
<figure>
<title>WildFly home in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-home-directory.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss home directory</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Click <emphasis role="strong">OK</emphasis> in the <emphasis role="strong">JBoss Server</emphasis> dialog.</simpara>
<figure>
<title>WildFly final dialog in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-server-dialog-final.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss server dialog final</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Settings</emphasis> (<emphasis role="strong">Preferences</emphasis>) dialog, click <guibutton>OK</guibutton>.</simpara>
<figure>
<title>WildFly defined in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-defined.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss defined</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

</section>
<section id="create-project-wildfly-idea">
<title>Create a project</title>
<simpara>The sample application is supplied as a Maven project with an associated <ulink url="http://maven.apache.org/pom.html">pom.xml</ulink> file that contains all the necessary project definitions. The corresponding IntelliJ IDEA project in such a case can be created by simply "opening" the <literal>pom.xml</literal> file. (Obviously, this isn&#8217;t the only way to create projects in IDEA. You can create projects for existing collections of source files, import Eclipse and Flash Builder projects, and Gradle build scripts. Finally, you can create projects from scratch.)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>On the Welcome screen, to the left of <emphasis role="strong">Configure</emphasis>, click <emphasis role="strong">Back</emphasis> <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-back-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-back-icon</phrase></textobject>
</inlinemediaobject>.</simpara>
</listitem>
<listitem>
<simpara>Under <emphasis role="strong">Quick Start</emphasis>, click <emphasis role="strong">Open Project</emphasis>.</simpara>
<figure>
<title>Open project in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-open-project.png"/>
    </imageobject>
    <textobject><phrase>i13 open project</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Open Project</emphasis> dialog, select the <literal>pom.xml</literal> file associated with the sample application, and click <guibutton>OK</guibutton>.</simpara>
<figure>
<title>Select pom in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-select-pom.png"/>
    </imageobject>
    <textobject><phrase>i13 select pom</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Wait while IntelliJ IDEA is processing <literal>pom.xml</literal> and creating the project. When this process is complete, the following message is shown:</simpara>
<figure>
<title>Configure JPA in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jpa-detected.png"/>
    </imageobject>
    <textobject><phrase>i13 jpa detected</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Configure</emphasis> in the message box. (If by now the message has disappeared, click <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-exclamation-mark-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-exclamation-mark-icon</phrase></textobject>
</inlinemediaobject> on the Status bar.</simpara>
<figure>
<title>JPA detected in status bar in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jpa-detected-status-bar.png"/>
    </imageobject>
    <textobject><phrase>i13 jpa detected status bar</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The <emphasis role="strong">Event Log</emphasis> tool window will open. Click <emphasis role="strong">Configure</emphasis> in this window.)</simpara>
<figure>
<title>JPA detected event log in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jpa-detected-event-log.png"/>
    </imageobject>
    <textobject><phrase>i13 jpa detected event log</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Setup Frameworks</emphasis> dialog, just click <guibutton>OK</guibutton>. (By doing so you confirm that the file <literal>persistence.xml</literal> found in the project belongs to the JPA framework.)</simpara>
<figure>
<title>Setup frameworks in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-setup-frameworks-jpa.png"/>
    </imageobject>
    <textobject><phrase>i13 setup frameworks jpa</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Now, as an intermediate check, make sure that the project structure looks something similar to this:</simpara>
<figure>
<title>Project structure in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-initial-project-structure.png"/>
    </imageobject>
    <textobject><phrase>i13 initial project structure</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

</section>
<section id="create-run-config-wildfly-idea">
<title>Create a run/debug configuration</title>
<simpara>Applications in IntelliJ IDEA are run and debugged according to what is called run/debug configurations. Now we are going to create the configuration for running and debugging the sample application in the context of WildFly.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In the main menu, select <menuchoice><guimenu>Run</guimenu> <guimenuitem>Edit Configurations&#8230;</guimenuitem></menuchoice>.</simpara>
<figure>
<title>Edit configurations in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-run-edit-configurations.png"/>
    </imageobject>
    <textobject><phrase>i13 run edit configurations</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Run/Debug Configurations</emphasis> dialog, click <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-plus-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-plus-icon</phrase></textobject>
</inlinemediaobject>, select <emphasis role="strong">JBoss Server</emphasis>, and then select <emphasis role="strong">Local</emphasis>.</simpara>
<figure>
<title>WildFly configuration in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-run-configs-plus-jboss.png"/>
    </imageobject>
    <textobject><phrase>i13 run configs plus jboss</phrase></textobject>
  </mediaobject>
</figure>

<simpara>As a result, the run/debug configuration for the WildFly server is created and its settings are shown in the right-hand part of the dialog.</simpara>
</listitem>
<listitem>
<simpara>Change the name of the run/debug configuration to <literal>WildFly8</literal> (optional).</simpara>
</listitem>
<listitem>
<simpara>In the lower part of the dialog, within the line <emphasis>Warning: No artifacts marked for deployment</emphasis>, click <guibutton>Fix</guibutton> and select <emphasis role="strong">movieplex7:war exploded</emphasis>. (Artifacts in IntelliJ IDEA are deployment-ready project outputs and also the configurations according to which such outputs are produced. In our case, there are two configurations for the sample application (<emphasis>movieplex7:war</emphasis> and <emphasis>movieplex7:war exploded</emphasis>). Both configurations represent a format suitable for deployment onto a Java EE 7-enabled application server. <emphasis>movieplex7:war</emphasis> corresponds to a Web archive (WAR). <emphasis>movieplex7:war exploded</emphasis> corresponds to the sample application directory structure (a decompressed archive). The second of the formats is more suitable at the development stage because manipulations with it are faster.)</simpara>
<figure>
<title>Fixing deployment warning in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-fix-deployment.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss fix deployment</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>Within the line <emphasis>Error: Artifact 'movieplex7: exploded' has invalid extension</emphasis>, click <guibutton>Fix</guibutton>.</simpara>
<figure>
<title>Invalid extension error message in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-invalid-extension.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss invalid extension</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Project Structure</emphasis> dialog, add <literal>.war</literal> at the end of the output directory path, and click <guibutton>OK</guibutton>. (For the servers of the JBoss family, the application root directory has to have <literal>.war</literal> at the end.)</simpara>
<figure>
<title>Extension error fix in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-fix-extension.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss fix extension</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Run/Debug Configurations</emphasis> dialog, switch to the <emphasis role="strong">Server</emphasis> tab. In the field for the application starting page URL, replace <literal>http://localhost:8080/movieplex7-1/</literal> with <literal>http://localhost:8080/movieplex7-1.0-SNAPSHOT/</literal> and click <guibutton>OK</guibutton>.</simpara>
<figure>
<title>Fixing application URL in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-jboss-url-fixed.png"/>
    </imageobject>
    <textobject><phrase>i13 jboss url fixed</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

<simpara>The <emphasis role="strong">Application Servers</emphasis> tool window opens in the lower part of the workspace. Shown in this window are the server run/debug configuration and the associated deployment artifact. Now you are ready to run the application.</simpara>
</section>
<section id="run-app-wildfly-idea">
<title>Run the application</title>
<simpara>In the <emphasis role="strong">Application Servers</emphasis> tool window, select the server run/debug configuration (<emphasis>WildFly8 [local]</emphasis>) and click <emphasis role="strong">Run</emphasis> <inlinemediaobject>
  <imageobject>
    <imagedata fileref="images/i13-run-icon.png"/>
  </imageobject>
  <textobject><phrase>i13-run-icon</phrase></textobject>
</inlinemediaobject>.</simpara>
<figure>
<title>Run WildFly in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-run-wildfly.png"/>
    </imageobject>
    <textobject><phrase>i13 run wildfly</phrase></textobject>
  </mediaobject>
</figure>

<simpara>IntelliJ IDEA compiles the code, builds the artifact, starts WildFly and deploys the artifact to the server. You can monitor this process in the <emphasis role="strong">Run</emphasis> tool window that opens in the lower part of the workspace.</simpara>
<figure>
<title>Run tool window in IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-run-tool-window-wildfly.png"/>
    </imageobject>
    <textobject><phrase>i13 run tool window wildfly</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Finally, your default Web browser opens and the starting page of the application is shown.</simpara>
<figure>
<title>Starting page in browser from IntelliJ IDEA</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/i13-starting-page-in-browser.png"/>
    </imageobject>
    <textobject><phrase>i13 starting page in browser</phrase></textobject>
  </mediaobject>
</figure>

<simpara>At this step IntelliJ IDEA is fully prepared for your development work, and you can continue with your exercises.</simpara>
</section>
</section>
</appendix>
</book>